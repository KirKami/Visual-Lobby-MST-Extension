<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kerberos.NET</name>
    </assembly>
    <members>
        <member name="M:Kerberos.NET.Client.KerberosClient.#ctor(Kerberos.NET.Configuration.Krb5Config,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Create a new KerberosClient instance.
            </summary>
            <param name="config">The custom configuration this client should use when making Kerberos requests.</param>
            <param name="logger">A logger instance for recording client logs</param>
        </member>
        <member name="M:Kerberos.NET.Client.KerberosClient.#ctor(Kerberos.NET.Configuration.Krb5Config,Microsoft.Extensions.Logging.ILoggerFactory,Kerberos.NET.Transport.IKerberosTransport[])">
            <summary>
            Create a KerberosClient instance.
            </summary>
            <param name="config">The custom configuration this client should use when making Kerberos requests.</param>
            <param name="logger">A logger instance for recording client logs</param>
            <param name="transports">A collection of network transports that the client
            will attempt to use to communicate with the KDC</param>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.Configuration">
            <summary>
            The custom configuration this client should use when making Kerberos requests.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.MaximumRetries">
            <summary>
            The number of KDC's the client will retry before failing the call.
            Default is 10 hosts, but limited by the total number of KDCs in the environment.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.RenewTickets">
            <summary>
            Determines whether the client attempt to renew tickets nearing expiration
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.RenewTicketsThreshold">
            <summary>
            Defines the threshold at which tickets are available to be renewed.
            A ticket must expire within this time period before it'll be considered.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.RefreshPollInterval">
            <summary>
            Defines how often the cache is polled to check for expiring tickets.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.Transports">
            <summary>
            The transports this client will attempt to use to communicate with the KDC
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.Cache">
            <summary>
            The cache that stores tickets for this client instance
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.ConnectTimeout">
            <summary>
            The maximum time a transport can try connecting to the KDC before timing out
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.CacheServiceTickets">
            <summary>
            Indicates whether the client should cache service tickets.
            Ticket-Granting-Tickets are always cached.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.CacheInMemory">
            <summary>
            Indicates that the cache should override configuration and always store in memory only.
            Defaults to true for backwards compatibility.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.AuthenticationOptions">
            <summary>
            The Kerberos options used during the AS-REQ flow.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.KdcOptions">
            <summary>
            The kerberos options used during the TGS-REQ flow.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.DefaultDomain">
            <summary>
            The realm of the currently authenticated user.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Client.KerberosClient.ScopeId">
            <summary>
            The logging Id of this client instance.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Client.KerberosClient.ResetConnections">
            <summary>
            Reset any connection state that may be cached from previous attempts.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Client.KerberosClient.PinKdc(System.String,System.String)">
            <summary>
            Prioritize the use of a specific KDC address for the provided realm. Note that calls to this
            method are additive and do not overwrite previously pinned addresses. If you need to remove an address
            you should call <see cref="M:Kerberos.NET.Client.KerberosClient.ClearPinnedKdc(System.String)" />.
            </summary>
            <param name="realm">The realm that will have a prioritized KDC.</param>
            <param name="kdc">The KDC to prioritize.</param>
        </member>
        <member name="M:Kerberos.NET.Client.KerberosClient.ClearPinnedKdc(System.String)">
            <summary>
            Removes any previously pinned KDC addresses for the provided realm.
            </summary>
            <param name="realm">The realm to remove the pinned addresses.</param>
        </member>
        <member name="M:Kerberos.NET.Client.KerberosClient.Authenticate(Kerberos.NET.Credentials.KerberosCredential)">
            <summary>
            Initiates an AS-REQ to get a Ticket-Granting-Ticket for the provided credentials
            </summary>
            <param name="credential">The credential used to authenticate the user</param>
            <returns>Returns an awaitable task</returns>
        </member>
        <member name="M:Kerberos.NET.Client.KerberosClient.GetServiceTicket(Kerberos.NET.RequestServiceTicket,System.Threading.CancellationToken)">
            <summary>
            Request a service ticket from a KDC using TGS-REQ
            </summary>
            <param name="rst">The parameters of the request</param>
            <param name="cancellation">A cancellation token to exit the request early</param>
            <returns>Returns a <see cref="T:Kerberos.NET.Client.ApplicationSessionContext"/> containing the service ticket</returns>
        </member>
        <member name="M:Kerberos.NET.Client.KerberosClient.GetServiceTicket(System.String,Kerberos.NET.Entities.ApOptions,System.String,Kerberos.NET.Entities.KrbTicket,Kerberos.NET.Entities.KrbTicket)">
            <summary>
            Request a service ticket from a KDC using TGS-REQ
            </summary>
            <param name="spn">The SPN of the requested service</param>
            <param name="options">Authentication options for the request</param>
            <param name="s4u">The optional account name of the user this service is trying to get a ticket on-behalf-of</param>
            <param name="s4uTicket">The optional service ticket that grants the S4U privilege</param>
            <param name="u2uServerTicket">The optional user-to-user (encrypt in session key) TGT</param>
            <returns>Returns the requested <see cref="T:Kerberos.NET.Entities.KrbApReq"/></returns>
        </member>
        <member name="M:Kerberos.NET.Client.KerberosClient.RenewTicket(System.String)">
            <summary>
            Attempt to renew a valid ticket still in the cache
            </summary>
            <param name="spn">The SPN of the ticket to renew. Defaults to the krbtgt ticket.</param>
            <returns>Returns an awaitable task</returns>
        </member>
        <member name="T:Kerberos.NET.Configuration.CommaSeparatedListAttribute">
            <summary>
            Indicates that the represented IEnumerable should be separated by commas instead of spaces
            </summary>
        </member>
        <member name="T:Kerberos.NET.Configuration.ConfigurationSectionList">
            <summary>
            Provides a list of key-value pairs of &lt;string, object&gt; that represent settings values within a configuration file.
            Unlike a hashtable this list can contain multiple keys of the same name;
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.ConfigurationSectionList.Name">
            <summary>
            Identifies the name of this configuration section.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Configuration.ConfigurationSectionList.FromConfigObject(Kerberos.NET.Configuration.Krb5Config)">
            <summary>
            Converts a <see cref="T:Kerberos.NET.Configuration.Krb5Config"/> instance into a <see cref="T:Kerberos.NET.Configuration.ConfigurationSectionList" /> for possible future serialization.
            </summary>
            <param name="config">The configuration instance to load</param>
            <returns>Returns a sectioned version of the configuration</returns>
        </member>
        <member name="M:Kerberos.NET.Configuration.ConfigurationSectionList.FromConfigObject(Kerberos.NET.Configuration.Krb5Config,Kerberos.NET.Configuration.Krb5ConfigurationSerializationConfig)">
            <summary>
            Converts a <see cref="T:Kerberos.NET.Configuration.Krb5Config"/> instance into a <see cref="T:Kerberos.NET.Configuration.ConfigurationSectionList" /> for possible future serialization.
            </summary>
            <param name="config">The configuration instance to load</param>
            <param name="serializationConfig">Serializer configuration options</param>
            <returns>Returns a sectioned version of the configuration</returns>
        </member>
        <member name="P:Kerberos.NET.Configuration.ConfigurationSectionList.Item(System.String)">
            <summary>
            Gets or sets a value stored in this list. Multiple keys of the same name will be returned as an IEnumerable.
            </summary>
            <param name="key">The name of the represented value</param>
            <returns>Returns a none, one, or more values based on the key.</returns>
        </member>
        <member name="M:Kerberos.NET.Configuration.ConfigurationSectionList.Add(System.String,System.Object)">
            <summary>
            Add a value to the collection.
            </summary>
            <param name="key">The key for the item.</param>
            <param name="value">The value of the item.</param>
        </member>
        <member name="M:Kerberos.NET.Configuration.ConfigurationSectionList.Remove(System.String)">
            <summary>
            Remove any values associated with this key.
            </summary>
            <param name="key">The key of the items to remove</param>
        </member>
        <member name="M:Kerberos.NET.Configuration.ConfigurationSectionList.Get``1(System.String)">
            <summary>
            Get an item by key of a given type.
            </summary>
            <typeparam name="T">The type to return</typeparam>
            <param name="key">The key used to find the item</param>
            <returns>Returns an item from the list</returns>
        </member>
        <member name="M:Kerberos.NET.Configuration.ConfigurationSectionList.Get(System.String,System.Type)">
            <summary>
            Get an item by key of a given type.
            </summary>
            <param name="key">The key used to find the item</param>
            <param name="type">The type to return</param>
            <returns>Returns an item from the list</returns>
        </member>
        <member name="M:Kerberos.NET.Configuration.ConfigurationSectionList.Get(System.String,System.Type,System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Get an item by key of a given type.
            </summary>
            <param name="key">The key used to find the item</param>
            <param name="type">The type to return</param>
            <param name="attributes">A list of attributes provided by reflection that describe the form of the type.</param>
            <returns>Returns an item from the list</returns>
        </member>
        <member name="M:Kerberos.NET.Configuration.ConfigurationSectionList.ToConfigObject(Kerberos.NET.Configuration.Krb5Config)">
            <summary>
            Converts the list of values into a structured <see cref="T:Kerberos.NET.Configuration.Krb5Config" /> configuration instance.
            </summary>
            <returns>Returns a configuration instance.</returns>
        </member>
        <member name="T:Kerberos.NET.Configuration.DnsCanonicalization">
            <summary>
            Possible values for <see cref="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.DnsCanonicalizeHostname"/>
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.DnsCanonicalization.False">
            <summary>
            Canonicalization disabled.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.DnsCanonicalization.True">
            <summary>
            Canonicalization enabled.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.DnsCanonicalization.Fallback">
            <summary>
            DNS canonicalization will only be performed the server hostname is not found with the original name when requesting credentials.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Configuration.EnumAsIntegerAttribute">
            <summary>
            Indicates a value normally represented by an Enum named value should be represented by the integer value instead.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Configuration.Krb5Config">
            <summary>
            Krb5 configuration for Kerberos client, server, and KDC behaviors. These configuration elements are in sync with
            MIT Krb5 1.18: https://web.mit.edu/kerberos/krb5-1.18/doc/admin/conf_files/krb5_conf.html.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5Config.Defaults">
            <summary>
            System defaults that will be used if the protocol or client do not provide explicit values.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5Config.KdcDefaults">
            <summary>
            System defaults that will be used by the KDC implementation.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5Config.Realms">
            <summary>
            A mapping of realm names to their respective settings. Note that realm
            names are case sensitive and most environments use UPPERCASE realm names.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5Config.DomainRealm">
            <summary>
            Provides a translation from a domain name or hostname to a Kerberos realm name. The key can be a host name
            or domain name, where domain names are indicated by a prefix of a period (.). The value of the relation is the
            Kerberos realm name for that particular host or domain. A host name relation implicitly provides the corresponding
            domain name relation, unless an explicit domain name relation is provided.
            [hostname.domainname.com] = "KERBEROS.REALM.COM"
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5Config.CaPaths">
             <summary>
             A client will use this section to find the authentication path between its realm and the realm of the server.
             The server will use this section to verify the authentication path used by the client.
            
             There is a key for each participating client realm, and each key has mappings for each of the server realms.
             The value of the map is an intermediate realm which may participate in the cross-realm authentication.
             A value of "." means that the two realms share keys directly, and no intermediate realms should be allowed to participate.
             </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5Config.AppDefaults">
            <summary>
            Provides a collection of settings that can be applied to services.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5Config.Logging">
            <summary>
            Provides logging configuration settings.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.AllowWeakCrypto">
            <summary>
            If this flag is set to false, then weak encryption types will be filtered out of the lists
            default_tgs_enctypes, default_tkt_enctypes, and permitted_enctypes. The default value for this tag is false.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.Canonicalize">
            <summary>
            If this flag is set to true, initial ticket requests to the KDC will request canonicalization of the client
            principal name, and answers with different client principals than the requested principal will be accepted.
            The default value is true.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.CCacheType">
            <summary>
            This parameter determines the format of credential cache types created by kinit or other programs.
            The default value is 4, which represents the most current format. Smaller values can be used for
            compatibility with very old implementations of Kerberos which interact with credential caches on the same host.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.ClockSkew">
            <summary>
            Sets the maximum allowable amount of clockskew in seconds that the library will tolerate before assuming that
            a Kerberos message is invalid. The default value is 300 seconds, or five minutes.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.DefaultCCacheName">
            <summary>
            This relation specifies the name of the default credential cache. The default is "FILE:%APPDATA%\Kerberos.NET\.krb5cc".
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.DefaultClientKeytabName">
            <summary>
            This relation specifies the name of the default keytab for obtaining client credentials. The default is "%APPDATA%\\Kerberos.NET\\client.keytab".
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.DefaultKeytabName">
            <summary>
            This relation specifies the default keytab name to be used by application servers such as sshd. The default is "%APPDATA%\\Kerberos.NET\\server.keytab".
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.DefaultReplayCacheName">
            <summary>
            This relation specifies the name of the default replay cache. The default is dfl:.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.DefaultRealm">
            <summary>
            Identifies the default Kerberos realm for the client. Set its value to your Kerberos realm.
            If this value is not set, then a realm must be specified with every Kerberos principal.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.DefaultTgsEncTypes">
            <summary>
            Identifies the supported list of session key encryption types that the client should
            request when making a TGS-REQ, in order of preference from highest to lowest. The
            list may be delimited with commas or whitespace.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.DefaultTicketEncTypes">
            <summary>
            Identifies the supported list of session key encryption types that the client should
            request when making an AS-REQ, in order of preference from highest to lowest. The format
            is the same as for default_tgs_enctypes.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.DnsCanonicalizeHostname">
            <summary>
            Indicate whether name lookups will be used to canonicalize hostnames for use in service
            principal names. Setting this flag to False can improve security by reducing reliance on
            DNS, but means that short hostnames will not be canonicalized to fully-qualified hostnames.
            Value <see cref="F:Kerberos.NET.Configuration.DnsCanonicalization.Fallback"/> is currently equivalent to True.
            The default value is <see cref="F:Kerberos.NET.Configuration.DnsCanonicalization.False"/>.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.DnsLookupKdc">
            <summary>
            Indicate whether DNS SRV records should be used to locate the KDCs and other servers for a realm,
            if they are not listed in the krb5.conf information for the realm.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.DnsUriLookup">
            <summary>
            Indicate whether DNS URI records should be used to locate the KDCs and other servers for a realm,
            if they are not listed in the krb5.conf information for the realm. SRV records are used as a fallback
            if no URI records were found.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.EnforceOkAsDelegate">
            <summary>
            If this flag to true, GSSAPI credential delegation will be disabled when the ok-as-delegate flag is not
            set in the service ticket. If this flag is false, the ok-as-delegate ticket flag is only enforced when
            an application specifically requests enforcement. The default value is false.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.ExtraAddresses">
            <summary>
            This allows a computer to use multiple local addresses, in order to allow Kerberos to work in a network that uses NATs
            while still using address-restricted tickets. The addresses should be in a comma-separated list. This option has no
            effect if noaddresses is true.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.Forwardable">
            <summary>
            If this flag is true, initial tickets will be forwardable by default, if allowed by the KDC. The default value is false.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.IgnoreAcceptorHostname">
            <summary>
            When accepting GSSAPI or krb5 security contexts for host-based service principals, ignore any hostname passed by the
            calling application, and allow clients to authenticate to any service principal in the keytab matching the service
            name and realm name.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.K5LoginAuthoritative">
            <summary>
            If this flag is true, principals must be listed in a local user’s k5login file to be granted login access, if a .k5login
            file exists. If this flag is false, a principal may still be granted login access through other mechanisms even if a k5login
            file exists but does not list the principal. The default value is true.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.K5LoginDirectory">
            <summary>
            If set, the library will look for a local user’s k5login file within the named directory, with a filename corresponding to the
            local username. If not set, the library will look for k5login files in the user’s home directory, with the filename .k5login.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.KcmMachService">
            <summary>
            On macOS only, determines the name of the bootstrap service used to contact the KCM daemon for the KCM credential cache type.
            If the value is -, Mach RPC will not be used to contact the KCM daemon. The default value is org.h5l.kcm.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.KcmSocket">
            <summary>
            Determines the path to the Unix domain socket used to access the KCM daemon for the KCM credential cache type. If the value is -,
            Unix domain sockets will not be used to contact the KCM daemon. The default value is /var/run/.heim_org.h5l.kcm-socket.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.KdcDefaultOptions">
            <summary>
            Default KDC options (Xored for multiple values) when requesting initial tickets. By default it is set to 0x00000010 (KDC_OPT_RENEWABLE_OK).
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.KdcTimeSync">
            <summary>
            Accepted values for this relation are 1 or 0. If it is nonzero, client machines will compute the difference between their time and
            the time returned by the KDC in the timestamps in the tickets and use this value to correct for an inaccurate system clock when requesting
            service tickets or authenticating to services. This corrective factor is only used by the Kerberos library; it is not used to change the
            system clock. The default value is 1.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.NoAddresses">
            <summary>
            If this flag is true, requests for initial tickets will not be made with address restrictions set, allowing the tickets to be
            used across NATs. The default value is true.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.PermittedEncryptionTypes">
            <summary>
            Identifies the encryption types that servers will permit for session keys and for ticket and authenticator encryption,
            ordered by preference from highest to lowest.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.PluginBaseDirectory">
            <summary>
            If set, determines the base directory where plugins are located.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.PreferredPreAuthTypes">
            <summary>
            This allows you to set the preferred preauthentication types which the client will attempt before others which
            may be advertised by a KDC. The default value for this setting is “17, 16, 2”, which forces the library
            to attempt to use PKINIT if it is supported.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.Proxiable">
            <summary>
            If this flag is true, initial tickets will be proxiable by default, if allowed by the KDC. The default value is false.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.QualifyShortname">
            <summary>
            If this string is set, it determines the domain suffix for single-component hostnames.
            The default value is the first search domain of the system’s DNS configuration.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.RDNS">
            <summary>
            If this flag is true, reverse name lookup will be used in addition to forward name lookup to canonicalizing
            hostnames for use in service principal names. If dns_canonicalize_hostname is set to false, this flag has no
            effect. The default value is false.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.RealmTryDomains">
            <summary>
            Indicate whether a host’s domain components should be used to determine the Kerberos realm of the host. The value
            of this variable is an integer: -1 means not to search, 0 means to try the host’s domain itself, 1 means to also
            try the domain’s immediate parent, and so forth. The library’s usual mechanism for locating Kerberos realms is used
            to determine whether a domain is a valid realm, which may involve consulting DNS if dns_lookup_kdc is set. The default
            is not to search domain components.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.RenewLifetime">
            <summary>
            Sets the default renewable lifetime for initial ticket requests. The default value is 0.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.SpakePreAuthGroups">
            <summary>
            A whitespace or comma-separated list of words which specifies the groups allowed for SPAKE preauthentication.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.TicketLifetime">
            <summary>
            Sets the default lifetime for initial ticket requests. The default value is 1 day.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.UdpPreferenceLimit">
            <summary>
            When sending a message to the KDC, the library will try using TCP before UDP if the size of the message is above
            udp_preference_limit. If the message is smaller than udp_preference_limit, then UDP will be tried before TCP.
            Regardless of the size, both protocols will be tried if the first attempt fails.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.VerifyApReqNoFail">
            <summary>
            If this flag is true, then an attempt to verify initial credentials will fail if the client machine does not have
            a keytab. The default value is false.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.RequestPac">
            <summary>
            Indicates whether the client should request a PAC during AS-REQ. Default is true.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5ConfigDefaults.DefaultNameType">
            <summary>
            Indicates whether the client should request a PAC during AS-REQ. Default is true.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Configuration.Krb5ConfigurationSerializer.Deserialize(System.String)">
            <summary>
            Deserialize a configuration value into a <see cref="T:Kerberos.NET.Configuration.ConfigurationSectionList" /> for querying values by key.
            </summary>
            <param name="configuration">The configuration to parse.</param>
            <returns>Returns a configuration list of key-value pairs.</returns>
        </member>
        <member name="M:Kerberos.NET.Configuration.Krb5ConfigurationSerializer.Serialize(Kerberos.NET.Configuration.Krb5Config,Kerberos.NET.Configuration.Krb5ConfigurationSerializationConfig)">
            <summary>
            Serialize a configuration object instance into a configuration file.
            </summary>
            <param name="configuration">The configuration to serialize.</param>
            <param name="serializationConfig">Optional configuration that describes the format requested.</param>
            <returns>Returns the configuration in string form.</returns>
        </member>
        <member name="M:Kerberos.NET.Configuration.Krb5ConfigurationSerializer.Serialize(Kerberos.NET.Configuration.ConfigurationSectionList,Kerberos.NET.Configuration.Krb5ConfigurationSerializationConfig)">
            <summary>
            Serialize a configuration list into a configuration file.
            </summary>
            <param name="configuration">The configuration to serialize.</param>
            <param name="serializerConfig">Optional configuration that describes the format requested.</param>
            <returns>Returns the configuration in string form.</returns>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.MaxDatagramReplySize">
            <summary>
            Specifies the maximum packet size that can be sent over UDP. The default value is 4096 bytes.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.TcpListenBacklog">
            <summary>
            Set the size of the listen queue length for the KDC daemon. The value may be limited by OS settings. The default value is 1000.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.SpakePreAuthKdcChallenge">
            <summary>
            Specifies the group for a SPAKE optimistic challenge.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.HostBasedServices">
            <summary>
            Lists services which will get host-based referral processing even if the server principal is not marked as host-based by the client.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.KdcListenEndpoints">
            <summary>
            Specifies the UDP listening addresses and/or ports for the krb5kdc daemon. Each entry may be an interface address, a port number, or an address and port number separated by a colon.
            If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. If no port is specified, the standard port (88) is used.
            If the KDC daemon fails to bind to any of the specified addresses, it will fail to start. The default is to bind to the wildcard address on the standard port.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.KdcTcpListenEndpoints">
            <summary>
            Specifies the TCP listening addresses and/or ports for the krb5kdc daemon. Each entry may be an interface address, a port number, or an address and port number separated by a colon.
            If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. If no port is specified, the standard port (88) is used.
            To disable listening on TCP, set this relation to the empty string with kdc_tcp_listen = "". If the KDC daemon fails to bind to any of the specified addresses, it will fail to start.
            The default is to bind to the wildcard address on the standard port.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.NoHostReferral">
            <summary>
            Lists services to block from getting host-based referral processing, even if the client marks the server principal as host-based or
            the service is also listed in host_based_services. no_host_referral = * will disable referral processing altogether.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.RestrictAnonymousToTicketGrantingTicketService">
            <summary>
            If set to true, the KDC will reject ticket requests from anonymous principals to service principals other than the realm’s ticket-granting service.
            This option allows anonymous PKINIT to be enabled for use as FAST armor tickets without allowing anonymous authentication to services.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.ProxyEnabled">
            <summary>
            Indicates whether the KDC will parse [MS-KKDCP] messages.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.RegisterDefaultAsReqHandler">
            <summary>
            Indicates whether the KDC will automatically register an AS-REQ message handler.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.RegisterDefaultTgsReqHandler">
            <summary>
            Indicates whether the KDC will automatically register a TGS-REQ message handler.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.RegisterDefaultPkInitPreAuthHandler">
            <summary>
            Indicates whether the KDC will automatically register the PKINIT pre-auth handler.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5KdcDefaults.ReceiveTimeout">
            <summary>
            The amount of time the KDC should wait receiving a request before timing out.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.AdminServer">
            <summary>
            Identifies the host where the administration server is running. Typically, this is the primary Kerberos server.
            This tag must be given a value in order to communicate with the the admin service server for the realm.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.AuthToLocal">
            <summary>
            This tag allows you to set a general rule for mapping principal names to local user names.
            It will be used if there is not an explicit mapping for the principal name that is being translated.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.AuthToLocalNames">
            <summary>
            This subsection allows you to set explicit mappings from principal names to local user names.
            The tag is the mapping name, and the value is the corresponding local user name.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.DefaultDomain">
            <summary>
            This tag specifies the domain used to expand hostnames when translating Kerberos 4 service principals
            to Kerberos 5 principals (for example, when converting rcmd.hostname to host/hostname.domain).
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.DisableEncryptedTimestamps">
            <summary>
            If this flag is true, the client will not perform encrypted timestamp preauthentication if requested by the KDC
            Setting this flag can help to prevent dictionary attacks by active attackers, if the realm’s KDCs support SPAKE
            preauthentication or if initial authentication always uses another mechanism or always uses FAST. This flag
            persists across client referrals during initial authentication. This flag does not prevent the KDC from offering
            encrypted timestamp.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.HttpAnchors">
            <summary>
            When KDCs and kpasswd servers are accessed through HTTPS proxies, this tag can be used to specify the location
            of the CA certificate which should be trusted to issue the certificate for a proxy server. If left unspecified,
            the system-wide default set of CA certificates is used.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.Kdc">
            <summary>
            The name or address of a host running a KDC for that realm. An optional port number, separated from the hostname
            by a colon, may be included. For your computer to be able to communicate with the KDC for each realm, this tag
            must be given a value in each realm subsection in the configuration file, or there must be DNS SRV records
            specifying the KDCs.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KPasswdServer">
            <summary>
            Points to the server where all the password changes are performed. If there is no such entry, DNS will be
            queried (unless forbidden by dns_lookup_kdc). Finally, port 464 on the admin_server host will be tried.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.PkInitAnchors">
            <summary>
            Specifies the location of trusted anchor (root) certificates which the client trusts to sign KDC certificates.
            This option may be specified multiple times.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.PkInitCertificateMatch">
            <summary>
            Specifies matching rules that the client certificate must match before it is used to attempt PKINIT authentication.
            If a user has multiple certificates available (on a smart card, or via other media), there must be exactly one certificate
            chosen before attempting PKINIT authentication. This option may be specified multiple times. All the available certificates
            are checked against each rule in order until there is a match of exactly one certificate.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.PkInitEkuChecking">
            <summary>
            This option specifies what Extended Key Usage value the KDC certificate presented to the client must contain.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.PkInitDhMinimumBits">
            <summary>
            Specifies the size of the Diffie-Hellman key the client will attempt to use. The acceptable values are 2048 and 4096.
            The default is 2048.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.PkInitIdentities">
            <summary>
            Specifies the location(s) to be used to find the user’s X.509 identity information. If this option is specified multiple times,
            the first valid value is used; this can be used to specify an environment variable (with ENV:envvar) followed by a default value.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.PkInitKdcHostname">
            <summary>
            The presence of this option indicates that the client is willing to accept a KDC certificate with a dNSName SAN (Subject Alternative Name)
            rather than requiring the id-pkinit-san as defined in RFC 4556. This option may be specified multiple times. Its value should contain the
            acceptable hostname for the KDC (as contained in its certificate).
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.PkInitPool">
            <summary>
            Specifies the location of intermediate certificates which may be used by the client to complete the trust chain between a KDC certificate
            and a trusted anchor. This option may be specified multiple times.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.PkInitRequireCrlChecking">
            <summary>
            If a match is found for the certificate in a CRL, verification fails. If the certificate being verified is not listed in a CRL,
            or there is no CRL present for its issuing CA, and pkinit_require_crl_checking is false, then verification succeeds.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.PkInitRevoke">
            <summary>
            Specifies the location of Certificate Revocation List (CRL) information to be used by the client when verifying the
            validity of the KDC certificate presented.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.PrimaryKdc">
            <summary>
            Identifies the primary KDC(s). Currently, this tag is used in only one case: If an attempt to get credentials
            fails because of an invalid password, the client software will attempt to contact the primary KDC, in case the
            user’s password has just been changed, and the updated database has not been propagated to the replica servers yet.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.V4InstanceConvert">
            <summary>
            This subsection allows the administrator to configure exceptions to the default_domain mapping rule. It contains V4
            instances (the tag name) which should be translated to some specific hostname (the tag value) as the second component
            in a Kerberos V5 principal name.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.V4Realm">
            <summary>
            This relation is used when converting a V5 principal name to a V4 principal name. It is used when the V4 realm name and the
            V5 realm name are not the same, but still share the same principal names and passwords. The tag value is the Kerberos V4 realm name.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcAclFile">
            <summary>
            KDC Server setting: Location of the access control list file that the admin service uses to determine which principals are allowed which permissions on the Kerberos database.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcDatabaseModule">
            <summary>
            KDC Server setting: This relation indicates the name of the configuration section under [dbmodules] for database-specific parameters used by the loadable database library.
            The default value is the realm name. If this configuration section does not exist, default values will be used for all database parameters.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcDefaultPrincipalExpiration">
            <summary>
            KDC Server setting: Specifies the default expiration date of principals created in this realm. The default value is 0, which means no expiration date.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcDefaultPrincipalFlags">
            <summary>
            KDC Server setting: Specifies the default attributes of principals created in this realm. The format for this string is a comma-separated list of flags,
            with ‘+’ before each flag that should be enabled and ‘-‘ before each flag that should be disabled.
            The postdateable, forwardable, tgt-based, renewable, proxiable, dup-skey, allow-tickets, and service flags default to enabled.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcDictionaryFilePath">
            <summary>
            KDC Server setting: Location of the dictionary file containing strings that are not allowed as passwords. The file should contain one string per line,
            with no additional whitespace. If none is specified or if there is no policy assigned to the principal, no dictionary
            checks of passwords will be performed.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcEncryptedChallenegeIndicator">
            <summary>
            KDC Server setting: Specifies the authentication indicator value that the KDC asserts into tickets obtained using FAST encrypted challenge pre-authentication.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcHostBasedServices">
            <summary>
            KDC Server setting: Lists services which will get host-based referral processing even if the server principal is not marked as host-based by the client.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcIncrementalPropagationEnabled">
            <summary>
            KDC Server setting: Specifies whether incremental database propagation is enabled. The default value is false.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcIncrementalPropagationLogSize">
            <summary>
            KDC Server setting: Specifies the maximum number of log entries to be retained for incremental propagation.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcIncrementalPropagationReplicaPoll">
            <summary>
            KDC Server setting: Specifies how often the replica KDC polls for new updates from the primary.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcIncrementalPropagationListenEndpoints">
            <summary>
            KDC Server setting: Specifies the iprop RPC listening addresses and/or ports for the the admin service. Each entry may be an interface address,
            a port number, or an address and port number separated by a colon. If the address contains colons, enclose it in square brackets.
            If no address is specified, the wildcard address is used.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcIncrementalPropagationResyncTimeout">
            <summary>
            KDC Server setting: Specifies the amount of time to wait for a full propagation to complete. This is optional in configuration files, and is used by replica KDCs only.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcAdminServiceListenEndpoints">
            <summary>
            KDC Server setting: Specifies the admin service RPC listening addresses and/or ports for the the admin service. Each entry may be an interface address, a port number, or an address
            and port number separated by a colon. If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address
            is used.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcKeyStashFile">
            <summary>
            KDC Server setting: Specifies the location where the system key has been stored.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcListenEndpoints">
            <summary>
            KDC Server setting: Specifies the UDP listening addresses and/or ports for the KDC service. Each entry may be an interface address, a port number, or an address and port number separated by a colon.
            If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. If no port is specified, the standard port (88) is used.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcTcpListenEndpoints">
            <summary>
            KDC Server setting: Specifies the TCP listening addresses and/or ports for the KDC service. Each entry may be an interface address, a port number, or an address and port number separated by a colon.
            If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. If no port is specified, the standard port (88) is used.
            To disable listening on TCP, set this relation to the empty string with kdc_tcp_listen = "".
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcPasswordListenEndpoints">
            <summary>
            KDC Server setting: Specifies the kpasswd listening addresses and/or ports for the the admin service. Each entry may be an interface address, a port number, or an address and port number separated by a colon.
            If the address contains colons, enclose it in square brackets. If no address is specified, the wildcard address is used. If the admin service fails to bind to any of the specified addresses,
            it will fail to start.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcMaxTicketLifetime">
            <summary>
            KDC Server setting: Specifies the maximum time period for which a ticket may be valid in this realm. The default value is 24 hours.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcMaxRenewableLifetime">
            <summary>
            KDC Server setting: Specifies the maximum time period during which a valid ticket may be renewed in this realm. The default value is 0.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcNoHostReferral">
            <summary>
            KDC Server setting: Lists services to block from getting host-based referral processing, even if the client marks the server principal as host-based or
            the service is also listed in host_based_services. no_host_referral = * will disable referral processing altogether.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcRejectBadTransit">
            <summary>
            KDC Server setting: If set to true, the KDC will check the list of transited realms for cross-realm tickets against the transit path computed from the realm names and the capaths section of its krb5.conf file;
            if the path in the ticket to be issued contains any realms not in the computed path, the ticket will not be issued, and an error will be returned to the client instead.
            If this value is set to false, such tickets will be issued anyways, and it will be left up to the application server to validate the realm transit path.
            If the disable-transited-check flag is set in the incoming request, this check is not performed at all.Having the reject_bad_transit option will cause such ticket requests to be rejected always.
            This transit path checking and config file option currently apply only to TGS requests.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcRestrictAnonymousToTicketGrantingService">
            <summary>
            KDC Server setting: If set to true, the KDC will reject ticket requests from anonymous principals to service principals other than the realm’s ticket-granting service.
            This option allows anonymous PKINIT to be enabled for use as FAST armor tickets without allowing anonymous authentication to services.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcSpakePreAuthIndicator">
            <summary>
            KDC Server setting: Specifies an authentication indicator value that the KDC asserts into tickets obtained using SPAKE pre-authentication.
            The default is not to add any indicators. This option may be specified multiple times.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.KdcSupportedEncryptionTypes">
            <summary>
            KDC Server setting: Specifies the default key/salt combinations of principals for this realm.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Configuration.Krb5RealmConfig.CompatibilityFlags">
            <summary>
            Compatibility shims should be enforced by the KDC.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Configuration.PkInitEkuCheck">
            <summary>
            The the methods used to verify if a certificate contains the necessary EKUs.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PkInitEkuCheck.KpKdc">
            <summary>
            This is the default value and specifies that the KDC must have the id-pkinit-KPKdc EKU as defined in RFC 4556.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PkInitEkuCheck.KpServerAuth">
            <summary>
            If kpServerAuth is specified, a KDC certificate with the id-kp-serverAuth EKU will be accepted.
            This key usage value is used in most commercially issued server certificates.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PkInitEkuCheck.None">
            <summary>
            If none is specified, then the KDC certificate will not be checked to verify it has an acceptable EKU.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.None">
            <summary>
            No flags are set.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.AllowTickets">
            <summary>
            Enabling this flag means that the KDC will issue tickets for this principal. Disabling this flag essentially deactivates the principal within this realm.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.DuplicateSessionKey">
            <summary>
            Enabling this flag allows the KDC to issue user-to-user service tickets for this principal.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.Forwardable">
            <summary>
            Enabling this flag allows the principal to obtain forwardable tickets.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.HardwareAuth">
            <summary>
            If this flag is enabled, then the principal is required to preauthenticate using a hardware device before receiving any tickets.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.NoAuthDataRequired">
            <summary>
            Enabling this flag prevents PAC or AD-SIGNEDPATH data from being added to service tickets for the principal.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.OkAsDelegate">
            <summary>
            If this flag is enabled, it hints the client that credentials can and should be delegated when authenticating to the service.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.OkToAuthAsDelegate">
            <summary>
            Enabling this flag allows the principal to use S4USelf tickets.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.Postdateable">
            <summary>
            Enabling this flag allows the principal to obtain postdateable tickets.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.PreAuth">
            <summary>
            If this flag is enabled on a client principal, then that principal is required to preauthenticate to the KDC before receiving any tickets.
            On a service principal, enabling this flag means that service tickets for this principal will only be issued to clients with a TGT that has the preauthenticated bit set.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.Proxiable">
            <summary>
            Enabling this flag allows the principal to obtain proxy tickets.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.PasswordChangeRequired">
            <summary>
            Enabling this flag forces a password change for this principal.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.PasswordService">
            <summary>
            If this flag is enabled, it marks this principal as a password change service. This should only be used in special cases,
            for example, if a user’s password has expired, then the user has to get tickets for that principal without going through
            the normal password authentication in order to be able to change the password.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.Renewable">
            <summary>
            Enabling this flag allows the principal to obtain renewable tickets.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.Service">
            <summary>
            Enabling this flag allows the the KDC to issue service tickets for this principal.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Configuration.PrincipalFlags.TgtBased">
            <summary>
            Enabling this flag allows a principal to obtain tickets based on a ticket-granting-ticket,
            rather than repeating the authentication process that was used to obtain the TGT.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Configuration.TimeSpanDurationSerializer">
            <summary>
            A parser that converts the linux duration form into TimeSpan and back.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Credentials.KerberosAsymmetricCredential">
            <summary>
            A credential used for PKINIT during client authentication. This relies on client certificates
            to authenticate callers to the KDC. The KDC will follow defined processes to validate the certificate.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Credentials.KerberosAsymmetricCredential.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)">
            <summary>
            Creates a new instance of an asymmetric credential.
            </summary>
            <param name="cert">The certificate used to authenticate the client.</param>
            <param name="username">Optionally an NT_PRINCIPAL name can be supplied as a
            hint otherwise the username will be pulled from the certificate.</param>
            <param name="domain">Optionally provide a realm hint.</param>
        </member>
        <member name="P:Kerberos.NET.Credentials.KerberosAsymmetricCredential.Certificate">
            <summary>
            The certificate used during client authentication.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Credentials.KerberosAsymmetricCredential.SupportsOptimisticPreAuthentication">
            <summary>
            Indicates whether the credential has enough information to skip the initial KDC prompt for credentials step.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Credentials.KerberosAsymmetricCredential.IncludeOption">
            <summary>
            Indicates how the client certificate should be packaged into the request to the KDC.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Credentials.KerberosAsymmetricCredential.KeyAgreement">
            <summary>
            Indicates what key agreement algorithm should be used to negotiate session keys.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Credentials.KerberosAsymmetricCredential.SupportsEllipticCurveDiffieHellman">
            <summary>
            Indicates whether the credential should prefer Elliptive Curve algorithms.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Credentials.KerberosAsymmetricCredential.SupportsDiffieHellman">
            <summary>
            Indicates whether the credential should prefer the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Credentials.KerberosAsymmetricCredential.StartKeyAgreement">
            <summary>
            Creates the <see cref="T:Kerberos.NET.Crypto.IKeyAgreement"/> that is used to derive session keys.
            </summary>
            <returns>Returns <see cref="T:Kerberos.NET.Crypto.IKeyAgreement"/> to derive session keys.</returns>
        </member>
        <member name="M:Kerberos.NET.Credentials.KerberosAsymmetricCredential.CacheKeyAgreementParameters(Kerberos.NET.Crypto.IKeyAgreement)">
            <summary>
            If overridden this method will cache the key agreement private keys to reduce key generation time.
            Note that caching Key Agreement private keys is not recommended as these keys should be ephemeral.
            </summary>
            <param name="agreement">The agreement private key to cache.</param>
            <returns>Returns true if the key was cached, otherwise it will return false.</returns>
        </member>
        <member name="M:Kerberos.NET.Credentials.KerberosAsymmetricCredential.TransformKdcReq(Kerberos.NET.Entities.KrbKdcReq)">
            <summary>
            Applies credential-specific changes to the KDC-REQ message and is what supplies the PKINIT properties to the request.
            </summary>
            <param name="req">The <see cref="T:Kerberos.NET.Entities.KrbKdcReq"/> that will be modified.</param>
        </member>
        <member name="M:Kerberos.NET.Credentials.KerberosAsymmetricCredential.DecryptKdcRep``1(Kerberos.NET.Entities.KrbKdcRep,Kerberos.NET.Crypto.KeyUsage,System.Func{System.ReadOnlyMemory{System.Byte},``0})">
            <summary>
            Decrypts the response from the KDC using credential-supplied secrets.
            </summary>
            <typeparam name="T">The return type</typeparam>
            <param name="kdcRep">The response from the KDC to decrypt</param>
            <param name="keyUsage">The KeyUsage salt used to decrypt the response</param>
            <param name="func">The parsing function to process the decrypted response</param>
            <returns>Returns <typeparamref name="T"/> after decryption</returns>
        </member>
        <member name="M:Kerberos.NET.Credentials.KerberosAsymmetricCredential.VerifyKdcSignature(System.Security.Cryptography.Pkcs.SignedCms)">
            <summary>
            Verifies the PKINIT response from the KDC is signed and validates as expected.
            Throws <see cref="T:System.Security.Cryptography.CryptographicException"/> if the KDC certificate cannot be validated.
            </summary>
            <param name="signedMessage">The signed CMS message within the response</param>
        </member>
        <member name="M:Kerberos.NET.Credentials.KerberosAsymmetricCredential.Validate">
            <summary>
            Validates the credential is well-formed before attempting to use it.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Credentials.KerberosAsymmetricCredential.CreateKey">
            <summary>
            Creates the session key used by the KDC exchange.
            </summary>
            <returns>Returns the Key Agreement shared secret</returns>
        </member>
        <member name="F:Kerberos.NET.Crypto.Rfc8009Transformer.DefaultIterations">
            <summary>
            Default iteration count is 32768.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Crypto.KrbFx.Cf1(System.String,System.String)">
            <summary>
            KRB-FX-CF1: Concatenate two strings into a single string.
            KRB-FX-CF1(UTF-8 string, UTF-8 string) -> (UTF-8 string)
            KRB-FX-CF1(x, y) := x || y
            </summary>
            <param name="x">The first string</param>
            <param name="y">The second string</param>
            <returns>Returns the two strings concatenated</returns>
        </member>
        <member name="M:Kerberos.NET.Crypto.KrbFx.Cf1(System.ReadOnlyMemory{System.Byte},System.ReadOnlyMemory{System.Byte})">
            <summary>
            KRB-FX-CF1: Concatenate two strings into a single string.
            KRB-FX-CF1(UTF-8 string, UTF-8 string) -> (UTF-8 string)
            KRB-FX-CF1(x, y) := x || y
            </summary>
            <param name="x">The first string</param>
            <param name="y">The second string</param>
            <returns>Returns the two strings concatenated</returns>
        </member>
        <member name="M:Kerberos.NET.Crypto.KrbFx.Cf2(System.ReadOnlyMemory{System.Byte},System.ReadOnlyMemory{System.Byte},System.ReadOnlyMemory{System.Byte},System.ReadOnlyMemory{System.Byte},Kerberos.NET.Crypto.EncryptionType)">
             <summary>
             Combine a weak key with a strong key to produce a key of relative strength.
             KRB-FX-CF2(protocol key, protocol key, octet string, octet string)  ->  (protocol key)
            
             PRF+(K1, pepper1) -> octet-string-1
             PRF+(K2, pepper2) -> octet-string-2
             KRB-FX-CF2(K1, K2, pepper1, pepper2) := random-to-key(octet-string-1 ^ octet-string-2)
             </summary>
             <param name="key1">The first key</param>
             <param name="key2">The second key</param>
             <param name="pepper1">The first pepper</param>
             <param name="pepper2">The second pepper</param>
             <param name="type">The encryption type to determine which random2key function to use</param>
             <returns>Returns result of passing two strings through a PRF and XOR'ing the result.</returns>
        </member>
        <member name="M:Kerberos.NET.Crypto.KrbFx.PseudoRandomPlus(System.ReadOnlyMemory{System.Byte},System.ReadOnlyMemory{System.Byte},Kerberos.NET.Crypto.EncryptionType)">
            <summary>
            PRF+(protocol key, octet string) -> (octet string)
            PRF+(key, shared-info) := pseudo-random(key,  1 || shared-info ) ||
                     pseudo-random(key, 2 || shared-info ) ||
                     pseudo-random(key, 3 || shared-info ) || ...
            </summary>
            <param name="key">The key to run through the PRF</param>
            <param name="pepper">The pepper for the PRF</param>
            <param name="etype">The EncryptionType handler to execute the PRF</param>
            <returns>Returns the result of executing n rounds of the <see cref="T:Kerberos.NET.Crypto.KerberosCryptoTransformer" /> PRF.</returns>
        </member>
        <member name="P:Kerberos.NET.Crypto.Rfc2898DeriveBytes.AttemptReflectionLookup">
            <summary>
            Indicates whether this should attempt to locate the native
            implementation before falling back to a managed implementation.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Crypto.Rfc2898DeriveBytes.RequireNativeImplementation">
            <summary>
            Indicate whether this should enforce using the native implementation
            (i.e. a certified version) or allow the use of the managed implementation.
            The default is to require the native implementation.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Dns.DnsQuery">
            <summary>
            Provides a mechanism to query for SRV DNS records.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Dns.DnsQuery.RegisterImplementation(Kerberos.NET.Dns.IKerberosDnsQuery)">
            <summary>
            Register a custom DNS implementation for outbound queries.
            </summary>
            <param name="dnsQuery">The query implementation to register.</param>
        </member>
        <member name="M:Kerberos.NET.Dns.DnsQuery.QuerySrv(System.String)">
            <summary>
            Contact a DNS server and request an SRV record for the provided query value.
            SRV queries hold the form _service._proto.name.
            </summary>
            <param name="query">The query value to send to the server.</param>
            <returns>Returns zero or more SRV records for requested query value.</returns>
        </member>
        <member name="T:Kerberos.NET.Dns.IKerberosDnsQuery">
            <summary>
            Provides a mechanism to query for DNS records as used by Kerberos.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Dns.IKerberosDnsQuery.Query(System.String,Kerberos.NET.Dns.DnsRecordType)">
            <summary>
            Make a DNS lookup for the provided query and record type.
            </summary>
            <param name="query">The query to send to the DNS server.</param>
            <param name="type">The requested record type of the query.</param>
            <returns>Returns zero or more results from the query.</returns>
        </member>
        <member name="M:Kerberos.NET.Entities.EntityHashCode.GetHashCode(System.Object[])">
            <summary>
            Generate a reasonably distributed hashcode for a collection of fields
            </summary>
            <param name="fields">The fields of an object</param>
            <returns>Returns a hashcode to be used within a GetHashCode() implementation</returns>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_FORCE_REDISCOVERY">
            <summary>
            Forces cached domain controller data to be ignored.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_DIRECTORY_SERVICE_REQUIRED">
            <summary>
            Requires that the returned domain controller support directory services.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_DIRECTORY_SERVICE_PREFERRED">
            <summary>
            Attempts to find a domain controller that supports directory service functions.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_GC_SERVER_REQUIRED">
            <summary>
            Requires that the returned domain controller be a global catalog server for
            the forest of domains with this domain as the root.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_PDC_REQUIRED">
            <summary>
            Requires that the returned domain controller be the primary domain controller for the domain.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_BACKGROUND_ONLY">
            <summary>
            Requests that cached domain controller data should be used.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_IP_REQUIRED">
            <summary>
            This parameter indicates that the domain controller must have an IP address.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_KDC_REQUIRED">
            <summary>
            Requires that the returned domain controller be currently running the Kerberos Key Distribution Center service.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_TIMESERV_REQUIRED">
            <summary>
            Requires that the returned domain controller be currently running the Windows Time Service.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_WRITABLE_REQUIRED">
            <summary>
            Requires that the returned domain controller be writable; that is, host a writable copy of the directory service.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_GOOD_TIMESERV_PREFERRED">
            <summary>
            Attempts to find a domain controller that is a reliable time server.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_AVOID_SELF">
            <summary>
            Specifies that the returned domain controller name should not be the current computer.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_ONLY_LDAP_NEEDED">
            <summary>
            Specifies that the server returned is an LDAP server.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_IS_FLAT_NAME">
            <summary>
            Specifies that the DomainName parameter is a flat name. This flag cannot be combined with the DS_IS_DNS_NAME flag.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_IS_DNS_NAME">
            <summary>
            Specifies that the DomainName parameter is a DNS name. This flag cannot be combined with the DS_IS_FLAT_NAME flag.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_TRY_NEXTCLOSEST_SITE">
            <summary>
            Attempts to find a domain controller in the same site as the caller otherwise attempts to resolve the next closest site.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_DIRECTORY_SERVICE_6_REQUIRED">
            <summary>
            Requires that the returned domain controller be running Windows Server 2008 or later.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_WEB_SERVICE_REQUIRED">
            <summary>
            Requires that the returned domain controller be currently running the Active Directory web service.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_DIRECTORY_SERVICE_8_REQUIRED">
            <summary>
            Requires that the returned domain controller be running Windows Server 2012 or later.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_DIRECTORY_SERVICE_9_REQUIRED">
            <summary>
            Requires that the returned domain controller be running Windows Server 2012 R2 or later.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_DIRECTORY_SERVICE_10_REQUIRED">
            <summary>
            Requires that the returned domain controller be running Windows Server 2016 or later.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_RETURN_DNS_NAME">
            <summary>
            Specifies that the names returned should be DNS names.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.DcLocatorHint.DS_RETURN_FLAT_NAME">
            <summary>
            Specifies that the names returned should be flat names.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Entities.KdcProxyMessageMode">
            <summary>
            Used to describe how a KDC proxy message has encoded the internal message
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcProxyMessageMode.NoPrefix">
            <summary>
            Indicates the message does not include the length prefix.
            This is often used by clients that encode messages using the UDP form.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcProxyMessageMode.IncludeLengthPrefix">
            <summary>
            Indicates the message does include the length prefix.
            This is often used by clients that encode messages using the TCP form.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Entities.KdcProxyMessage.WrapMessage(System.ReadOnlyMemory{System.Byte},System.String,System.Nullable{Kerberos.NET.Entities.DcLocatorHint},Kerberos.NET.Entities.KdcProxyMessageMode)">
            <summary>
            Wraps a standard KDC message into a proxy message
            </summary>
            <param name="message">The message to wrap</param>
            <param name="domain">The optional domain hint for downstream processing</param>
            <param name="hint">A DC location hint for downstream processing</param>
            <param name="mode">The encoding mode which indicates whether the message should include the length prefix or not</param>
            <returns>Returns a formed KDC Message</returns>
        </member>
        <member name="M:Kerberos.NET.Entities.KdcProxyMessage.UnwrapMessage">
            <summary>
            Unwraps a proxy-encoded message for further processing
            </summary>
            <returns>Returns the unwrapped message</returns>
        </member>
        <member name="M:Kerberos.NET.Entities.KdcProxyMessage.UnwrapMessage(Kerberos.NET.Entities.KdcProxyMessageMode@)">
            <summary>
            Unwraps a proxy-encoded message for further processing
            </summary>
            <param name="mode">Indicates whether the proxy message includes the length prefix or not</param>
            <returns>Returns the unwrapped message</returns>
        </member>
        <member name="M:Kerberos.NET.Entities.KdcProxyMessage.TryDecode(System.ReadOnlyMemory{System.Byte},Kerberos.NET.Entities.KdcProxyMessage@)">
            <summary>
            Attempt to decode a stream of bytes into a <see cref="T:Kerberos.NET.Entities.KdcProxyMessage"/>
            </summary>
            <param name="encoded">The message to decode</param>
            <param name="decoded">The decoded message</param>
            <returns>Returns true if it was successfully decoded, otherwise returns false</returns>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Reserved">
            <summary>
            Reserved for future expansion of this field.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Forwardable">
            <summary>
            The FORWARDABLE option indicates that the ticket to be issued is to
            have its forwardable flag set. It may only be set on the initial
            request, or in a subsequent request if the TGT on which it is based is
            also forwardable.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Forwarded">
            <summary>
            The FORWARDED option is only specified in a request to the
            ticket-granting server and will only be honored if the TGT in the request
            has its FORWARDABLE bit set. This option indicates that this is a
            request for forwarding. The address(es) of the host from which the resulting
            ticket is to be valid are included in the addresses field of the request.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Proxiable">
            <summary>
            The PROXIABLE option indicates that the ticket to be issued is to have
            its proxiable flag set.  It may only be set on the initial request, or a
            subsequent request if the TGT on which it is based is also proxiable.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Proxy">
            <summary>
            The PROXY option indicates that this is a request for a proxy. This option
            will only be honored if the TGT in the request has its PROXIABLE bit set.
            The address(es) of the host from which the resulting ticket is to be valid
            are included in the addresses field of the request.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.AllowPostdate">
            <summary>
            The ALLOW-POSTDATE option indicates that the ticket to be issued is to have
            its MAY-POSTDATE flag set. It may only be set on the initial request, or in
            a subsequent request if the TGT on which it is based also has its MAY-POSTDATE
            flag set.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Postdated">
            <summary>
            The POSTDATED option indicates that this is a request for a postdated ticket.
            This option will only be honored if the TGT on which it is based has its MAY-POSTDATE
            flag set. The resulting ticket will also have its INVALID flag set, and that flag may
            be reset by a subsequent request to the KDC after the starttime in the ticket has been
            reached.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused7">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Renewable">
            <summary>
            The RENEWABLE option indicates that the ticket to be issued is to have its RENEWABLE
            flag set. It may only be set on the initial request, or when the TGT on which the
            request is based is also renewable. If this option is requested, then the rtime
            field in the request contains the desired absolute expiration time for the ticket.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused9">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused10">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.OptHardwareAuth">
            <summary>
            This flag was originally intended to indicate that hardware-supported authentication was
            used during pre-authentication. This flag is no longer recommended in the Kerberos V5 protocol.
            KDCs MUST NOT issue a ticket with this flag set. KDCs SHOULD NOT preserve this flag if it is
            set by another KDC.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused12">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused13">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Canonicalize">
            <summary>
            In order to request referrals the Kerberos client MUST explicitly request the
            "canonicalize" KDC option for the AS-REQ or TGS-REQ.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.RequestAnonymous">
            <summary>
            Indicates the client is requesting the KDC support anonymous PKINIT authentication.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.CNameInAdditionalTicket">
            <summary>
            This option MUST be set in a KRB_TGS_REQ message to request Service
            for User to Proxy (S4U2proxy) functionality.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused18">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused19">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused20">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused21">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused22">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused23">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused24">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused25">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.DisableTransitCheck">
            <summary>
            By default the KDC will check the transited field of a TGT against the policy of
            the local realm before it will issue derivative tickets based on the TGT. If this
            flag is set in the request, checking of the transited field is disabled. Tickets
            issued without the performance of this check will be noted by the reset (0) value
            of the TRANSITED-POLICY-CHECKED flag, indicating to the application server that
            the transited field must be checked locally. KDCs are encouraged but not required
            to honor the DISABLE-TRANSITED-CHECK option.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.RenewableOk">
            <summary>
            The RENEWABLE-OK option indicates that a renewable ticket will be acceptable if a ticket
            with the requested life cannot otherwise be provided, in which case a renewable ticket
            may be issued with a renew-till equal to the requested endtime. The value of the renew-till
            field may still be limited by local limits, or limits selected by the individual principal
            or server.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.EncTktInSkey">
            <summary>
            This option is used only by the ticket-granting service. The ENC-TKT-IN-SKEY option indicates
            that the ticket for the end server is to be encrypted in the session key from the additional
            TGT provided.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Unused29">
            <summary>
            This option is presently unused.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Renew">
            <summary>
            This option is used only by the ticket-granting service. The RENEW option indicates that the
            present request is for a renewal. The ticket provided is encrypted in the secret key for the
            server on which it is valid. This option will only be honored if the ticket to be renewed has
            its RENEWABLE flag set and if the time in its renew-till field has not passed. The ticket to
            be renewed is passed in the padata field as part of the authentication header.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KdcOptions.Validate">
            <summary>
            This option is used only by the ticket-granting service. The VALIDATE option indicates that
            the request is to validate a postdated ticket. It will only be honored if the ticket presented
            is postdated, presently has its INVALID flag set, and would otherwise be usable at this time.
            A ticket cannot be validated before its starttime. The ticket presented for validation is
            encrypted in the key of the server for which it is valid and is passed in the padata field
            as part of the authentication header.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_NONE">
            <summary>
            No error
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_NAME_EXP">
            <summary>
            Client's entry in database has expired
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_SERVICE_EXP">
            <summary>
            Server's entry in database has expired
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_BAD_PVNO">
            <summary>
            Requested protocol version number not supported
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_C_OLD_MAST_KVNO">
            <summary>
            Client's key encrypted in old master key
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_S_OLD_MAST_KVNO">
            <summary>
            Server's key encrypted in old master key
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_C_PRINCIPAL_UNKNOWN">
            <summary>
            Client not found in Kerberos database
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_S_PRINCIPAL_UNKNOWN">
            <summary>
            Server not found in Kerberos database
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_PRINCIPAL_NOT_UNIQUE">
            <summary>
            Multiple principal entries in database
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_NULL_KEY">
            <summary>
            The client or server has a null key
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_CANNOT_POSTDATE">
            <summary>
            Ticket not eligible for postdating
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_NEVER_VALID">
            <summary>
            Requested starttime is later than end time
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_POLICY">
            <summary>
            KDC policy rejects request
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_BADOPTION">
            <summary>
            KDC cannot accommodate requested option
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_ETYPE_NOSUPP">
            <summary>
            KDC has no support for encryption type
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_SUMTYPE_NOSUPP">
            <summary>
            KDC has no support for checksum type
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_PADATA_TYPE_NOSUPP">
            <summary>
            KDC has no support for padata type
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_TRTYPE_NOSUPP">
            <summary>
            KDC has no support for transited type
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_CLIENT_REVOKED">
            <summary>
            Clients credentials have been revoked
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_SERVICE_REVOKED">
            <summary>
            Credentials for server have been revoked
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_TGT_REVOKED">
            <summary>
            TGT has been revoked
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_CLIENT_NOTYET">
            <summary>
            Client not yet valid; try again later
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_SERVICE_NOTYET">
            <summary>
            Server not yet valid; try again later
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_KEY_EXPIRED">
            <summary>
            Password has expired; change password to reset
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_PREAUTH_FAILED">
            <summary>
            Pre-authentication information was invalid
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_PREAUTH_REQUIRED">
            <summary>
            Additional pre-authentication required
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_SERVER_NOMATCH">
            <summary>
            Requested server and ticket don't match
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_MUST_USE_USER2USER">
            <summary>
            Server principal valid for user2user only
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_PATH_NOT_ACCEPTED">
            <summary>
            KDC Policy rejects transited path
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_SVC_UNAVAILABLE">
            <summary>
            A service is not available
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_BAD_INTEGRITY">
            <summary>
            Integrity check on decrypted field failed
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_TKT_EXPIRED">
            <summary>
            Ticket expired
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_TKT_NYV">
            <summary>
            Ticket not yet valid
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_REPEAT">
            <summary>
            Request is a replay
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_NOT_US">
            <summary>
            The ticket isn't for us
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_BADMATCH">
            <summary>
            Ticket and authenticator don't match
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_SKEW">
            <summary>
            Clock skew too great
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_BADADDR">
            <summary>
            Incorrect net address
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_BADVERSION">
            <summary>
            Protocol version mismatch
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_MSG_TYPE">
            <summary>
            Invalid msg type
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_MODIFIED">
            <summary>
            Message stream modified
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_BADORDER">
            <summary>
            Message out of order
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_BADKEYVER">
            <summary>
            Specified version of key is not available
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_NOKEY">
            <summary>
            Service key not available
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_MUT_FAIL">
            <summary>
            Mutual authentication failed
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_BADDIRECTION">
            <summary>
            Incorrect message direction
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_METHOD">
            <summary>
            Alternative authentication method required
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_BADSEQ">
            <summary>
            Incorrect sequence number in message
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_INAPP_CKSUM">
            <summary>
            Inappropriate type of checksum in message
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_PATH_NOT_ACCEPTED">
            <summary>
            Policy rejects transited path
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_ERR_RESPONSE_TOO_BIG">
            <summary>
            Response too big for UDP; retry with TCP
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_ERR_GENERIC">
            <summary>
            Generic error
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_ERR_FIELD_TOOLONG">
            <summary>
            Field is too long for this implementation
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_CLIENT_NOT_TRUSTED">
            <summary>
            The KDC evaluated the client certificate and does not accept it
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_KDC_NOT_TRUSTED">
            <summary>
            The certificate used by the KDC is not trusted
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_INVALID_SIG">
            <summary>
            The signature of the request signed by client private key is invalid
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED">
            <summary>
            KDC policy has determined the provided Diffie-Hellman key parameters are not acceptable
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_CERTIFICATE_MISMATCH">
            <summary>
            Reserved for PKINIT
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_NO_TGT">
            <summary>
            No TGT available to validate USER-TO-USER
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_WRONG_REALM">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_USER_TO_USER_REQUIRED">
            <summary>
            Ticket must be for USER-TO-USER
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_CANT_VERIFY_CERTIFICATE">
            <summary>
            Reserved for PKINIT
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_INVALID_CERTIFICATE">
            <summary>
            Reserved for PKINIT
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_REVOKED_CERTIFICATE">
            <summary>
            Reserved for PKINIT
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_REVOCATION_STATUS_UNKNOWN">
            <summary>
            Reserved for PKINIT
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_REVOCATION_STATUS_UNAVAILABLE">
            <summary>
            Reserved for PKINIT
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_CLIENT_NAME_MISMATCH">
            <summary>
            Reserved for PKINIT
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_KDC_NAME_MISMATCH">
            <summary>
            Reserved for PKINIT
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_INCONSISTENT_KEY_PURPOSE">
            <summary>
            The client certificate does not contain the KeyPurposeId EKU and is required
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED">
            <summary>
            The signature algorithm used to sign the CA certificate is not accepted
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED">
            <summary>
            The client did not include the required paChecksum parameter
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED">
            <summary>
            The signature algorithm used to sign the request is not accepted
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED">
            <summary>
            The KDC does not support public key encryption for PKINIT
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_PRINCIPAL_UNKNOWN">
            <summary>
            A well-known Kerberos principal name is used but not supported.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_REALM_UNKNOWN">
            <summary>
            A well-known Kerberos realm name is used but not supported.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KRB_AP_ERR_PRINCIPAL_RESERVED">
            <summary>
            A reserved Kerberos principal name is used but not supported.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_PREAUTH_EXPIRED">
            <summary>
            The provided pre-auth data has expired.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_MORE_PREAUTH_DATA_REQUIRED">
            <summary>
            The KDC found the presented pre-auth data incomplete and requires additional information.
            This is common for multi-trip authentication mechanisms.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_PREAUTH_BAD_AUTHENTICATION_SET">
            <summary>
            The client sent an authentication set that the KDC was not expecting.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.KerberosErrorCode.KDC_ERR_UNKNOWN_CRITICAL_FAST_OPTIONS">
            <summary>
            The provided FAST options that were marked as critical are unknown to the KDC and cannot be processed.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Entities.KrbMessage">
            <summary>
            A utility class to detect message properties
            </summary>
        </member>
        <member name="M:Kerberos.NET.Entities.KrbMessage.DetectMessageType(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Determine if the message is a Kerberos Type
            </summary>
            <param name="message">The message to examine</param>
            <returns>Returns the possible <see cref="T:Kerberos.NET.Entities.MessageType"/></returns>
        </member>
        <member name="T:Kerberos.NET.Entities.KrbPrincipalName">
            <summary>
            Represents a krb-principal-name entity.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.KrbPrincipalName.IsServiceName">
            <summary>
            Indicates whether the provided <see cref="T:Kerberos.NET.Entities.KrbPrincipalName"/> is
            considered a service instead of a user
            </summary>
            <returns>Returns true if the name is for a service</returns>
        </member>
        <member name="M:Kerberos.NET.Entities.MessageTypeExtensions.IsValidMessageType(Kerberos.NET.Entities.MessageType)">
            <summary>
            Determines whether the provided type is within the bounds of the expected range of message types.
            </summary>
            <param name="type">The value to compare</param>
            <returns>Returns true if the value matches an expected type otherwise returns false</returns>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.KRB_AS_REQ">
            <summary>
            Request for initial authentication
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.KRB_AS_REP">
            <summary>
            Response to KRB_AS_REQ request
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.KRB_TGS_REQ">
            <summary>
            Request for authentication based on TGT
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.KRB_TGS_REP">
            <summary>
            Response to KRB_TGS_REQ request
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.KRB_AP_REQ">
            <summary>
            Application request to server
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.KRB_AP_REP">
            <summary>
            Response to KRB_AP_REQ_MUTUAL
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.KRB_RESERVED16">
            <summary>
            Reserved for user-to-user krb_tgt_request
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.KRB_RESERVED17">
            <summary>
            Reserved for user-to-user krb_tgt_reply
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.KRB_SAFE">
            <summary>
            Safe (checksummed) application message
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.KRB_PRIV">
            <summary>
            Private (encrypted) application message
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.KRB_CRED">
            <summary>
            Private (encrypted) message to forward credentials
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.KRB_ERROR">
            <summary>
            Error response
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.MessageType.IAKERB_HEADER">
            <summary>
            IAKerb Message Prefix
            </summary>
        </member>
        <member name="T:Kerberos.NET.Entities.PacOptions">
            <summary>
            Indicates what options of the PAC are requested and supported from the KDC.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PacOptions.Claims">
            <summary>
            Indicates the client can support claims issued by the KDC.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PacOptions.BranchAware">
            <summary>
            Indicates the client is aware of Read-Only Domain Controllers and handles RODC-specific errors.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PacOptions.ForwardToFullDc">
            <summary>
            Indicates to the KDC that the requested message was re-sent to a full KDC
            because the original RODC could not fulfill the request appropriately.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PacOptions.ResourceBasedConstrainedDelegation">
            <summary>
            Indicates the client can support resource-based constrained delegation.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Entities.PaDataType">
            <summary>
            Represents a key identifying the type of data in a key-value pair in a PA-Data structure.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_NONE">
            <summary>
            Indicates the absense of PA-Data.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_TGS_REQ">
            <summary>
            In the case of requests for additional tickets (KRB_TGS_REQ),
            padata-value will contain an encoded AP-REQ.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_ENC_TIMESTAMP">
            <summary>
            The PA-Data contains a timestamp encrypted the client long term key.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_PW_SALT">
            <summary>
            The padata-value for this pre-authentication type contains the salt
            for the string-to-key to be used by the client to obtain the key for
            decrypting the encrypted part of an AS-REP message.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.Reserved">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_ENC_UNIX_TIME">
            <summary>
            Deprecated. The PA-Data contains a timestamp encrypted the client long term key.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_SANDIA_SECUREID">
            <summary>
            Vendor-specific for Sandia's use of SecureID.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_SESAME">
            <summary>
            Deprecated. The PA-Data contains structures compatible with the SESAME protocol.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_OSF_DCE">
            <summary>
            Deprecated. The PA-Data contains structures compatible with OSF-DCE security protocol.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_CYBERSAFE_SECUREID">
            <summary>
            Vendor-specific for the Cybersafe SecureID implementation.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_AFS3_SALT">
            <summary>
            The PA-Data contains salts used by the AFS3 system.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_ETYPE_INFO">
            <summary>
            The PA-Data contains EType information for pre-authentication.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_SAM_CHALLENGE">
            <summary>
            Deprecated. The PA-Data contains a SAM/OTP Challenge request.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_SAM_RESPONSE">
            <summary>
            Deprecated. The PA-Data contains a SAM/OTP Challenge response.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_PK_AS_REQ_OLD">
            <summary>
            Deprecated. The PA-DATA contains a PKINIT request.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_PK_AS_REP_OLD">
            <summary>
            Deprecated. The PA-Data contains a PKINIT response.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_PK_AS_REQ">
            <summary>
            The PA-Data contains a PKINIT request.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_PK_AS_REP">
            <summary>
            The PA-Data contains a PKINIT response.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_ETYPE_INFO2">
            <summary>
            The PA-Data contains extended EType information for pre-authentication.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_SVR_REFERRAL_INFO">
            <summary>
            The PA-Data contains realm referral hints to aid clients in resolving referred KDCs.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_SAM_REDIRECT">
            <summary>
            Deprecated. The PA-Data contains a SAM/OTP Challenge request.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_GET_FROM_TYPED_DATA">
            <summary>
            Deprecated.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_SAM_ETYPE_INFO">
            <summary>
            Deprecated. The PA-Data contains SAM-specific EType information.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_ALT_PRINC">
            <summary>
            Deprecated. The PA-Data contains an alternate principal name to be used instead of the named principal in the request.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_SAM_CHALLENGE2">
            <summary>
            Deprecated. The PA-Data contains a SAM/OTP Challenge request.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_SAM_RESPONSE2">
            <summary>
            Deprecated. The PA-Data contains a SAM/OTP Challenge response.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_EXTRA_TGT">
            <summary>
            Reserved for extra TGT.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.TD_PKINIT_CMS_CERTIFICATES">
            <summary>
            The PA-Data contains additional certificates for CMS validation.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.TD_KRB_PRINCIPAL">
            <summary>
            The PA-Data contains a typed structure of the form KrbPrincipalName.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.TD_KRB_REALM">
            <summary>
            The PA-Data contains a typed structure of the form Realm.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.TD_TRUSTED_CERTIFIERS">
            <summary>
            The PA-Data contains a typed structure of TD-TRUSTED-CERTIFIERS.
            Each ExternalPrincipalIdentifier in the TD-TRUSTED-CERTIFIERS
            structure identifies a CA or a CA certificate (thereby its public key)
            trusted by the KDC.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.TD_CERTIFICATE_INDEX">
            <summary>
            The PA-Data contains a typed structure of TD-INVALID-CERTIFICATES.
            Each ExternalPrincipalIdentifier in the TD-INVALID-CERTIFICATES
            structure identifies a certificate (that was sent by the client)
            with an invalid signature.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.TD_APP_DEFINED_ERROR">
            <summary>
            The PA-Data contains an application specific error.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.TD_REQ_NONCE">
            <summary>
            The PA-Data contains a nonce in the form of an Integer.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.TD_REQ_SEQ">
            <summary>
            The PA-Data contains a sequence number for the request.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_PAC_REQUEST">
            <summary>
            The PA-Data contains a pac-request structure indicating a client preference for including a PAC.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_FOR_USER">
            <summary>
            The PA-Data contains a pa-for-user structure for
            requesting delegated tickets to self or other services.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_FOR_X509_USER">
            <summary>
            The PA-Data contains a pa-for-user structure containing an X509 certificate
            for requesting delegated tickets to self or other services.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_FOR_CHECK_DUPS">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_AS_CHECKSUM">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_FX_COOKIE">
            <summary>
            The PA-Data contains a stateless cookie that is not tied to a specific KDC.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_AUTHENTICATION_SET">
            <summary>
            The PA-Data contains a PA-AUTHENTICATION-SET structure containing elements
            used to provide hints to the client about whether the authentication mechanism
            can be used by the client.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_AUTH_SET_SELECTED">
            <summary>
            The PA-Data contains the encoding of the PA-AUTHENTICATION-SET sequence
            received from the KDC corresponding to the authentication set that is chosen.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_FX_FAST">
            <summary>
            The PA-Data contains a FAST Request which contains armored data for the request.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_FX_ERROR">
            <summary>
            The PA-Data contains a FAST error structure.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_ENCRYPTED_CHALLENGE">
            <summary>
            The PA-Data contains a FAST-encrypted challenge.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_OTP_CHALLENGE">
            <summary>
            The PA-Data contains a PA-OTP-CHALLENGE containing a
            server-generated nonce and information for the client on how to
            generate the OTP.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_OTP_REQUEST">
            <summary>
            The PA-Data contains the DER encoding of a PA-OTP-REQUEST with the
            pre-authentication data encrypted by the client using the generated
            Client Key and optional information on how the OTP was generated.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_OTP_CONFIRM">
            <summary>
            Obsolete.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_OTP_PIN_CHANGE">
            <summary>
            The PA-Data contains a PA-OTP-PIN-CHANGE structure which is returned
            by the KDC in the enc-fast-rep of a PA-FX-FAST-REPLY in the AS-REP if
            the user must change their PIN, if the user's PIN has been changed, or
            to notify the user of the PIN's expiry time.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_EPAK_AS_REQ">
            <summary>
            The PA-Data contains an AS-REQ to be used by the Extensible
            Pre-Authentication in Kerberos (EPAK) protocol.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_EPAK_AS_REP">
            <summary>
            The PA-Data contains an AS-REQ to be used by the Extensible
            Pre-Authentication in Kerberos (EPAK) protocol.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_PKINIT_KX">
            <summary>
            The PA-Data contains an EncryptedData structure containing a
            randomly generated key for the KDC contribution key.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_PKU2U_NAME">
            <summary>
            The PA-Data contains an InitiatorNameAssertion for the PKU2U protocol.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_REQ_ENC_PA_REP">
            <summary>
            The PA-Data contains the FAST checksum computed over the
            type AS-REQ or TGS-REQ in the request.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_SUPPORTED_ETYPES">
            <summary>
            The PA-Data contains a PA-SUPPORTED-ENCTYPES structure
            which specifies the encryption  types supported and contains
            a bit field of the supported encryption types bit flags.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PaDataType.PA_PAC_OPTIONS">
            <summary>
            The PA-Data contains a PA-PAC-OPTIONS structure which
            specifies explicitly requested options in the PAC.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Entities.S4uOptions">
            <summary>
            Options used during S4U logon for X509 Certificates.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.S4uOptions.LogonHours">
            <summary>
            Requests the KDC to check logon hour restrictions.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.S4uOptions.UseReplyKeyUsage">
            <summary>
            Requests the KDC use KeyUsage number 27 when encrypting the response.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Entities.ServiceTicketRequest">
            <summary>
            This structure is used to provide information to the KDC so it knows how to issue a service ticket.
            Note that it is a struct by design and therefore will be copied unless passed by reference.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.PreferredClientEType">
            <summary>
            Optionally indicates which EType should be used when generating the client (session) key.
            If not set, the EType will be the same EType as <see cref="P:Kerberos.NET.Entities.ServiceTicketRequest.ServicePrincipalKey"/>.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.KdcAuthorizationKey">
            <summary>
            The KDC Key used to sign authorization data during ticket generation and validation
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.Principal">
            <summary>
            The principal for which a service ticket is requested
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.EncryptedPartKey">
            <summary>
            The session key that will encrypt the ticket when sent to the client
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.EncryptedPartEType">
            <summary>
            Optionally specificy the EType used to encrypt the enc-part other than what is specified in <see cref="P:Kerberos.NET.Entities.ServiceTicketRequest.EncryptedPartKey" />
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.ServicePrincipal">
            <summary>
            The service principal for which the ticket will be issued against
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.ServicePrincipalKey">
            <summary>
            The key that will encrypt the ticket that only the service principal can decrypt
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.Flags">
            <summary>
            The flags that identify required properties of the ticket
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.Addresses">
            <summary>
            The client-supplied list of their known addresses. Only here for backwards compatibility
            and should not be relied on for any security decisions.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.RealmName">
            <summary>
            The name of the realm that issued the ticket.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.Now">
            <summary>
            The current timestamp to base validation on.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.StartTime">
            <summary>
            The time at which the ticket will start being valid.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.EndTime">
            <summary>
            The time at which the ticket will stop being valid.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.RenewTill">
            <summary>
            Optional. The time at which the ticket can be renewed until while it's before <see cref="P:Kerberos.NET.Entities.ServiceTicketRequest.StartTime"/>.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.Nonce">
            <summary>
            A unique counter for each ticket that is used to limit replay attacks.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.IncludePac">
            <summary>
            Indicates whether the KDC should generate or copy a PAC for this ticket.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.PreAuthenticationData">
            <summary>
            Additional authorization data to include in the encrypted portion of the ticket.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.SamAccountName">
            <summary>
            SAM account name to be used to generate TGT for Windows specific user principal.
            If this parameter contains valid string (not empty), CName of encrypted part of ticket
            will be created based on provided SamAccountName.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.MaximumTicketLifetime">
            <summary>
            Indicates the maximum length of time a ticket can be valid regardless of what the StartTime and EndTime propeties indicate.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.MaximumRenewalWindow">
            <summary>
            Indicates the maximum length of time a valid ticket can be renewed.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.ServiceTicketRequest.Compatibility">
            <summary>
            Indicates what compatibility modes if any the KDC should apply.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Entities.ServiceTicketRequest.ClampLifetime">
            <summary>
            Validate the lifetime values are within spec and if not set them to be valid.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.None">
            <summary>
            Reserved. Indicates the absense of flags.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.Reserved">
            <summary>
            Reserved for future extension.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.Forwardable">
            <summary>
            Tells the ticket-granting service that it can issue a new TGT—based on the
            presented TGT—with a different network address based on the presented TGT.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.Forwarded">
            <summary>
            Indicates either that a TGT has been forwarded or that a ticket was issued from a forwarded TGT.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.Proxiable">
            <summary>
            Tells the ticket-granting service that it can issue tickets with a network address that
            differs from the one in the TGT.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.Proxy">
            <summary>
            Indicates that the network address in the ticket is different from the one in the TGT
            used to obtain the ticket.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.MayPostDate">
            <summary>
            Indicates the requested ticket may be post-dated for use in future.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.PostDated">
            <summary>
            Indicates the requested ticket is post-dated for use in the future.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.Invalid">
            <summary>
            This flag indicates that a ticket is invalid, and it must be validated by the KDC before use.
            Application servers must reject tickets which have this flag set.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.Renewable">
            <summary>
            Used in combination with the End Time and Renew Till fields to cause tickets with long life
            spans to be renewed at the KDC periodically.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.Initial">
            <summary>
            Indicates that a ticket was issued using the authentication service (AS) exchange and
            not issued based on a TGT.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.PreAuthenticated">
            <summary>
            Indicates that the client was authenticated by the KDC before a ticket was issued.
            This flag usually indicates the presence of an authenticator in the ticket.
            It can also flag the presence of credentials taken from a smart card logon.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.HardwareAuthentication">
            <summary>
            This flag was originally intended to indicate that hardware-supported authentication
            was used during pre-authentication. This flag is no longer recommended in the Kerberos
            V5 protocol. KDCs MUST NOT issue a ticket with this flag set. KDCs SHOULD NOT preserve
            this flag if it is set by another KDC.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.TransitPolicyChecked">
            <summary>
            Application servers MUST ignore the TRANSITED-POLICY-CHECKED flag.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.OkAsDelegate">
            <summary>
            The KDC MUST set the OK-AS-DELEGATE flag if the service account is trusted for delegation.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.EncryptedPreAuthentication">
            <summary>
            Indicates the client supports FAST negotiation.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.TicketFlags.Anonymous">
            <summary>
            Indicates the ticket is anonymous.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Entities.PrivilegedAttributeCertificate">
            <summary>
            The Privilege Attribute Certificate contains memberships, additional credential
            information, profile and policy information, and supporting security metadata.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.PrivilegedAttributeCertificate.Version">
            <summary>
            The protocol version of this instance.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.PrivilegedAttributeCertificate.LogonInfo">
            <summary>
            The KERB_VALIDATION_INFO structure is a subset of the NETLOGON_VALIDATION_SAM_INFO4 structure
            ([MS-NRPC] section 2.2.1.4.13). It contains the authorization data of the user including
            group memberships.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.PrivilegedAttributeCertificate.ServerSignature">
            <summary>
            Contains the signature of the PAC structure signed using the target service key.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.PrivilegedAttributeCertificate.CredentialType">
            <summary>
            A PAC_CREDENTIAL_INFO structure contains the user's encrypted  credentials. The Key Usage Number [RFC4120] used in
            the encryption is KERB_NON_KERB_SALT (16) [MS-KILE] section 3.1.5.9. The encryption key used is the AS reply key.
            The PAC credentials buffer is included only when PKINIT [RFC4556] is used. Therefore, the AS reply key is derived based on PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.PrivilegedAttributeCertificate.KdcSignature">
            <summary>
            Contains the signature of the PAC structure signed using the KDC service key.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.PrivilegedAttributeCertificate.ClientClaims">
            <summary>
            Contains the claims optionally issued for the client.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.PrivilegedAttributeCertificate.DeviceClaims">
            <summary>
            Contains the claims optionally issued for the device.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.PrivilegedAttributeCertificate.ClientInformation">
            <summary>
            It is used to verify that the PAC corresponds to the client of the ticket.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.PrivilegedAttributeCertificate.UpnDomainInformation">
            <summary>
            This structure contains the client's UPN and FQDN.
            It is used to provide the UPN and FQDN ) that corresponds to the client of the ticket.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.PrivilegedAttributeCertificate.DelegationInformation">
            <summary>
            This structure lists the services that have been delegated through this Kerberos
            client and subsequent services or servers. The list is used only in a Service
            for User to Proxy (S4U2proxy) [MS-SFU] request. This feature could be used multiple
            times in succession from service to service.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Entities.PrivilegedAttributeCertificate.HasRequiredFields">
            <summary>
            Indicates whether this PAC contains enough of the required fields to be included in the ticket.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Entities.PrivilegedAttributeCertificate.Encode(Kerberos.NET.Crypto.KerberosKey,Kerberos.NET.Crypto.KerberosKey)">
            <summary>
            Encode the PAC as per [MS-PAC] and sign using both the KDC and service keys.
            </summary>
            <param name="kdcKey">The KDC service key</param>
            <param name="serverKey">The service key</param>
            <returns>Returns an encoded PAC structure</returns>
        </member>
        <member name="T:Kerberos.NET.Entities.SignatureMode">
            <summary>
            Defines how the PAC signatures should be processed.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.SignatureMode.Server">
            <summary>
            Indicates the Server Signature should be verified.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.SignatureMode.Kdc">
            <summary>
            Indicates the KDC Signature should be verified. This requries the Server signature to also be verified.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.FastOptions.HideClientNames">
            <summary>
            Requesting the KDC to hide client names in the KDC response.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Entities.PrincipalNameType">
            <summary>
            Indicates the format of the principal name
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PrincipalNameType.NT_UNKNOWN">
            <summary>
            The principal name format is unknown and will be treated like <see cref="F:Kerberos.NET.Entities.PrincipalNameType.NT_PRINCIPAL" />
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PrincipalNameType.NT_PRINCIPAL">
            <summary>
            Represents just the name of the principal and will form a name of user@realm if a realm is provided.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PrincipalNameType.NT_SRV_INST">
            <summary>
            Represents a unique service or instance such as krbtgt and will form a name of service/name@realm.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PrincipalNameType.NT_SRV_HST">
            <summary>
            Represents a service instance and will form a name of service/name@realm.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PrincipalNameType.NT_SRV_XHST">
            <summary>
            Represents a host as the remaining components of the name.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PrincipalNameType.NT_UID">
            <summary>
            Represents a unique identifier.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PrincipalNameType.NT_X500_PRINCIPAL">
            <summary>
            Represents a name encoded as X.509 Distinguished Name.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PrincipalNameType.NT_SMTP_NAME">
            <summary>
            represents an SMTP email name in the form of user@domain.com.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PrincipalNameType.NT_ENTERPRISE">
            <summary>
            Represents an enterprise name that may be mapped by the KDC to a canonical name.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Entities.PrincipalNameType.NT_WELLKNOWN">
            <summary>
            Represents a name that is considered well-known or special meaning other than identifying a particular instance.
            </summary>
        </member>
        <member name="T:Kerberos.NET.RequestServiceTicket">
            <summary>
            The parameters used during a TGS-REQ
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.ServicePrincipalName">
            <summary>
            The SPN of the service a ticket is requested
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.ApOptions">
            <summary>
            The authentication options for this request
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.S4uTarget">
            <summary>
            The username a service ticket is requested on-behalf-of
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.S4uTicket">
            <summary>
            The evidence ticket used to prove the requestor is allowed to
            request a ticket on-behalf-of the S4uTarget user
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.UserToUserTicket">
            <summary>
            The TGT of the service receiving the requested ticket to initiate
            the U2U encrypted in session key flow
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.KdcOptions">
            <summary>
            KDC request options
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.CNameHint">
            <summary>
            A hint provided in the TGS-REQ to help the KDC find the user details
            before having to decrypt their TGT
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.Realm">
            <summary>
            The realm of the authenticated user
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.GssContextFlags">
            <summary>
            Indicates which flags should be sent to the target within the GSS Delegation Info structure
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.Configuration">
            <summary>
            Includes additional configuration details for the request.
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.IncludeSequenceNumber">
            <summary>
            Indicates whether the AP-REQ should include a sequence number.
            Default behavior is to include the sequece number.
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.AuthenticatorChecksumSource">
            <summary>
            Optionally provide the application value over which to generate an authenticator checksum.
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.AuthenticatorChecksum">
            <summary>
            Optionally provide an application checksum for the checksum.
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.CanRetrieveExpiredTickets">
            <summary>
            Indicates whether the client should attempt to use tickets that are already expired.
            </summary>
        </member>
        <member name="P:Kerberos.NET.RequestServiceTicket.CacheTicket">
            <summary>
            Indicates whether the client should cache the ticket. Default null indicates the client should decide.
            </summary>
        </member>
        <member name="M:Kerberos.NET.KerberosIdentity.GetDelegatedServiceTicket(System.String)">
            <summary>
            Request a service ticket from a KDC using TGS-REQ
            </summary>
            <param name="spn">The SPN of the requested service</param>
            <returns>Returns the requested <see cref="T:Kerberos.NET.Client.ApplicationSessionContext"/></returns>
        </member>
        <member name="M:Kerberos.NET.KerberosIdentity.GetDelegatedServiceTicket(Kerberos.NET.RequestServiceTicket,System.Threading.CancellationToken)">
            <summary>
            Request a service ticket from a KDC using TGS-REQ
            </summary>
            <param name="rst">The parameters of the request</param>
            <param name="cancellation">A cancellation token to exit the request early</param>
            <returns>Returns a <see cref="T:Kerberos.NET.Client.ApplicationSessionContext"/> containing the service ticket</returns>
        </member>
        <member name="T:Kerberos.NET.Ndr.NdrBuffer">
            <summary>
            A buffer used to serialize NDR message structures.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Server.DefaultRealmSettings">
            <summary>
            A simple implementation of the realm settings that wraps KRB5 configuration.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.DefaultRealmSettings.MaximumSkew">
            <inheritdoc />
        </member>
        <member name="P:Kerberos.NET.Server.DefaultRealmSettings.SessionLifetime">
            <inheritdoc />
        </member>
        <member name="P:Kerberos.NET.Server.DefaultRealmSettings.MaximumRenewalWindow">
            <inheritdoc />
        </member>
        <member name="P:Kerberos.NET.Server.DefaultRealmSettings.Compatibility">
            <inheritdoc />
        </member>
        <member name="M:Kerberos.NET.Server.IRealmReferral.Refer">
            <summary>
            Returns the service principal the client should be referred to that can complete the ticket request.
            </summary>
            <returns>Returns a service principal for another realm.</returns>
        </member>
        <member name="P:Kerberos.NET.Server.IRealmService.Name">
            <summary>
            The fully qualified name of the realm
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.IRealmService.Settings">
            <summary>
            Global settings of the realm.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.IRealmService.Principals">
            <summary>
            The service used to query for all user and service principals.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.IRealmService.TrustedRealms">
            <summary>
            This realm may have one or more trust relationships to other realms.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.IRealmService.Configuration">
            <summary>
            Provides access to the KDC configuration values.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Server.IRealmService.Now">
            <summary>
            Returns the current time in UTC.
            </summary>
            <returns>Returns the current time in UTC</returns>
        </member>
        <member name="M:Kerberos.NET.Server.IPrincipalService.Find(Kerberos.NET.Entities.KrbPrincipalName,System.String)">
            <summary>
            Find a user or service principal based on the provided <see cref="T:Kerberos.NET.Entities.KrbPrincipalName" />
            </summary>
            <param name="principalName">The principal name to find</param>
            <param name="realm">Kerberos realm. Used to fully qualify principal name.</param>
            <returns>Returns <see cref="T:Kerberos.NET.Server.IKerberosPrincipal"/> that contains enough information to fulfill a Kerberos request</returns>
        </member>
        <member name="M:Kerberos.NET.Server.IPrincipalService.FindAsync(Kerberos.NET.Entities.KrbPrincipalName,System.String)">
            <summary>
            Find a user or service principal based on the provided <see cref="T:Kerberos.NET.Entities.KrbPrincipalName" />
            </summary>
            <param name="principalName">The principal name to find</param>
            <param name="realm">Kerberos realm. Used to fully qualify principal name.</param>
            <returns>Returns <see cref="T:Kerberos.NET.Server.IKerberosPrincipal"/> that contains enough information to fulfill a Kerberos request</returns>
        </member>
        <member name="M:Kerberos.NET.Server.IPrincipalService.RetrieveKdcCertificate">
            <summary>
            Returns a server authentication certificate that can be used by the KDC to sign server messages.
            </summary>
            <returns>Returns an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> containing a private key</returns>
        </member>
        <member name="M:Kerberos.NET.Server.IPrincipalService.RetrieveKeyCache(Kerberos.NET.Crypto.KeyAgreementAlgorithm)">
            <summary>
            Optionally look up a cached Diffie-Hellman server parameter for PKINIT
            </summary>
            <param name="algorithm">The algorithm of the cached key to retrieve</param>
            <returns>Returns an exchange key if found otherwise returns null</returns>
        </member>
        <member name="M:Kerberos.NET.Server.IPrincipalService.CacheKey(Kerberos.NET.Crypto.IExchangeKey)">
            <summary>
            Cache the server parameter exchange key used during PKINIT
            </summary>
            <param name="key">The key to cache</param>
            <returns>Returns the cached key</returns>
        </member>
        <member name="P:Kerberos.NET.Server.IRealmSettings.MaximumSkew">
            <summary>
            The maximum window of time to add to a timestamp to determine validity.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.IRealmSettings.SessionLifetime">
            <summary>
            The maximum lifetime of a service ticket before it needs to be renewed. Default is 10 hours.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.IRealmSettings.MaximumRenewalWindow">
            <summary>
            The maximum length of time a ticket can be renewed if enabled. Default is 7 days.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.IRealmSettings.Compatibility">
            <summary>
            Indicates the compatibility shims the KDC should enforce.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.IKerberosPrincipal.PrincipalName">
            <summary>
            The fully-qualified principal name that will be used by the AS and TGS services.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.IKerberosPrincipal.SupportedPreAuthenticationTypes">
            <summary>
            The list of methods that can be used to authenticate the principal during an AS request.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.IKerberosPrincipal.SupportedEncryptionTypes">
            <summary>
            The list of cipher suites this principal has keys for and is willing to use during AS and TGS requests.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.IKerberosPrincipal.Type">
            <summary>
            Indicates the primary use of this principal object, such as being a user, service, or trust referral.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.IKerberosPrincipal.Expires">
            <summary>
            Indicates when if ever this principal will expire and is used during PAC generation.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Server.IKerberosPrincipal.Validate(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
            <summary>
            Validates whether a certificate chain can correctly authenticate this user.
            Throws a <see cref="T:Kerberos.NET.KerberosValidationException"/> if the certificate chain cannot be validated.
            </summary>
            <param name="certificates">The certificate chain for the user</param>
        </member>
        <member name="M:Kerberos.NET.Server.IKerberosPrincipal.RetrieveLongTermCredential">
            <summary>
            Retrieve the long term credentials used by the principal for authentication.
            In most cases it is their password-derived keys.
            </summary>
            <returns>Returns the expected long term key used during authentication</returns>
        </member>
        <member name="M:Kerberos.NET.Server.IKerberosPrincipal.GeneratePac">
            <summary>
            Generate the PAC used by Windows for authorization decisions.
            </summary>
            <returns>Returns a <see cref="T:Kerberos.NET.Entities.PrivilegedAttributeCertificate"/> containing authorization data or null.</returns>
        </member>
        <member name="M:Kerberos.NET.Server.ITrustedRealmService.ProposeTransit(Kerberos.NET.Entities.KrbTgsReq,Kerberos.NET.Server.PreAuthenticationContext)">
            <summary>
            Examines the TGS-REQ and determines if the request can be fulfilled by another trusted realm. A referral
            is issued if the request can be fulfilled by another trusted realm.
            </summary>
            <param name="tgsReq">The TGS-REQ message to examine.</param>
            <param name="context">The current authentication context of the request.</param>
            <returns>Returns a referral if another realm can fulfill the request otherwise it returns null.</returns>
        </member>
        <member name="M:Kerberos.NET.Server.KdcPreAuthenticationHandlerBase.PreValidate(Kerberos.NET.Server.PreAuthenticationContext)">
            <summary>
            Executes before the validation occurs and can be used to parse the message data for external pipelines.
            </summary>
            <param name="preauth">Contains the current state of the request to inform the outer message handler</param>
        </member>
        <member name="M:Kerberos.NET.Server.KdcPreAuthenticationHandlerBase.Validate(Kerberos.NET.Entities.KrbKdcReq,Kerberos.NET.Server.PreAuthenticationContext)">
            <summary>
            Execute the PA-Data validation phase and verify if the presented message meets the requirement of the handler.
            </summary>
            <param name="asReq">The authentication request message</param>
            <param name="preauth">Contains the current state of the request to inform the outer message handler</param>
            <returns>Optionally returns PA-Data that should be returned to the client in the response</returns>
        </member>
        <member name="M:Kerberos.NET.Server.KdcPreAuthenticationHandlerBase.Validate(Kerberos.NET.Entities.KrbKdcReq,Kerberos.NET.Server.IKerberosPrincipal)">
            <summary>
            Execute the PA-Data validation phase and verify if the presented message meets the requirement of the handler.
            </summary>
            <param name="asReq">The authentication request message</param>
            <param name="principal">The user principal found during the AS-REQ processing that should be evaluated by this handler</param>
            <returns>Optionally returns PA-Data that should be returned to the client in the response</returns>
        </member>
        <member name="M:Kerberos.NET.Server.KdcPreAuthenticationHandlerBase.PostValidate(Kerberos.NET.Server.IKerberosPrincipal,System.Collections.Generic.List{Kerberos.NET.Entities.KrbPaData})">
            <summary>
            Executes after the pre-auth validation has completed and can be used to modify the response message
            </summary>
            <param name="principal">The authenticated principal</param>
            <param name="preAuthRequirements">The list of PA-Data that will be sent in the response message</param>
        </member>
        <member name="T:Kerberos.NET.Server.KdcServerOptions">
            <summary>
            The server parameters that dictate low-level behavior of each request
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.KdcServerOptions.Configuration">
            <summary>
            The configuration that dictates how the KDC will operate.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.KdcServerOptions.Log">
            <summary>
            The log factory for the KDC and depedent components.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.KdcServerOptions.Cancellation">
            <summary>
            The global server cancellation token. This will trigger all threads to stop.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.KdcServerOptions.DefaultRealm">
            <summary>
            The realm that will be used if a realm name is required before the pipeline has processed a message.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.KdcServerOptions.IsDebug">
            <summary>
            Indicates whether the server should emit debug logs or enable debugger features.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.KdcServerOptions.RealmLocator">
            <summary>
            The function that translates an incoming realm to that realms <see cref="T:Kerberos.NET.Server.IRealmService" />
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.KdcServerOptions.NextScopeId">
            <summary>
            The function that generates the next logged transaction Id for each request.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Server.KerberosCompatibilityFlags">
            <summary>
            Identifies which compatibility shims should be enforced by the KDC.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Server.KerberosCompatibilityFlags.None">
            <summary>
            Do not enforce any compatibility shims.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Server.KerberosCompatibilityFlags.NormalizeRealmsUppercase">
            <summary>
            Always uppercase realm names.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Server.KerberosCompatibilityFlags.DoNotCanonicalizeTgsReqFromTgt">
            <summary>
            Do not copy the name from the TGT if the canonicalize bit is set
            </summary>
        </member>
        <member name="T:Kerberos.NET.Server.ListenerOptions">
            <inheritdoc />
        </member>
        <member name="T:Kerberos.NET.Server.PaDataState">
            <summary>
            An abstract hole for storing state of pre-auth processes
            </summary>
        </member>
        <member name="M:Kerberos.NET.Server.PaDataTgsTicketHandler.PreValidate(Kerberos.NET.Server.PreAuthenticationContext)">
            <summary>
            Executes before the validation stage and can be used for initial decoding of the message.
            </summary>
            <param name="preauth">The current context of the request</param>
        </member>
        <member name="M:Kerberos.NET.Server.PaDataTgsTicketHandler.Validate(Kerberos.NET.Entities.KrbKdcReq,Kerberos.NET.Server.PreAuthenticationContext)">
            <summary>
            Executes the primary validation process for the pre-auth data.
            </summary>
            <param name="asReq">The message to validate</param>
            <param name="context">The current context of the request</param>
            <returns>Optionally returns PA-Data that needs to be sent to the client otherwise returns null.</returns>
        </member>
        <member name="M:Kerberos.NET.Server.PaDataTgsTicketHandler.ExtractApReq(Kerberos.NET.Server.PreAuthenticationContext)">
            <summary>
            Locate the AP-REQ in the PA-Data of a TGS-REQ.
            </summary>
            <param name="context">The current contex of the request.</param>
            <returns>Returns the AP-REQ message within the TGS-REQ PA-Data.</returns>
        </member>
        <member name="T:Kerberos.NET.Server.PkInitState">
            <summary>
            Contains the state information of a PK-INIT request used between
            the pre-validation and validation phases of the request.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PkInitState.PkInitRequest">
            <summary>
            The decoded PK-INIT request message.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PkInitState.Cms">
            <summary>
            The decoded CMS Message prior to validating the signature.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PkInitState.ClientCertificate">
            <summary>
            The certificate collection presented to the KDC by the client in the CMS message.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Server.PreAuthenticationContext">
            <summary>
            PreAuthenticationContext contains the state of the request
            as it moves through KDC request handler pipelines
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.Message">
            <summary>
            The message that is currently processed by the handler.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.EvidenceTicketIdentity">
            <summary>
            The identity that provides evidence the client is authenticated.
            In this case it should always be krbtgt or or a referral realm service.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.EvidenceTicketKey">
            <summary>
            The key used to validate the evidence ticket is valid.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.Principal">
            <summary>
            The identity that will be the subject of the issued ticket.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.ServicePrincipal">
            <summary>
            The identity that will be the target of the issued ticket.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.EncryptedPartKey">
            <summary>
            The session key used to protect tickets as they're returned to the client.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.EncryptedPartEType">
            <summary>
            Optionally specify the encryption type to be used to encrypt the enc-part if it's different from <see cref="P:Kerberos.NET.Server.PreAuthenticationContext.EncryptedPartKey" />
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.PreAuthenticationSatisfied">
            <summary>
            Indicates whether the handler has decided if it has enough information
            to proceed with issuing a ticket to the requested service.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.PaData">
            <summary>
            Additional pre-auth data that should be included in the response.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.Ticket">
            <summary>
            The ticket containing the principal identity protected by the evidence ticket.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.Failure">
            <summary>
            A failure if any that was raised by the KDC handler pipeline. It should not be ignored.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.PreAuthenticationState">
            <summary>
            The active state of preauthentication handlers
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.ClientAuthority">
            <summary>
            The PA-Data type that authenticated the client.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.PreAuthenticationContext.IncludePac">
            <summary>
            Indicates whether the requested service ticket should include a PAC.
            The null, the handler will detect if a PAC is required based on whether
            the PA-Data includes the KrbPaPacRequest or the evidence ticket includes a PAC.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Server.PreAuthenticationContext.GetState``1(Kerberos.NET.Entities.PaDataType)">
            <summary>
            Retrieve the current pre-authentication state for a particular PA-Data type.
            If the initial state is not present it will be created.
            </summary>
            <typeparam name="T">The expected type of the returned state instance.</typeparam>
            <param name="type">The PA-Data type the state belongs to.</param>
            <returns>Returns the current state of the pre-authentication type.</returns>
        </member>
        <member name="F:Kerberos.NET.Server.PrincipalType.User">
            <summary>
            Indicates the principal is a regular user that can authenticate and request service tickets
            </summary>
        </member>
        <member name="F:Kerberos.NET.Server.PrincipalType.Service">
            <summary>
            Indicates the principal is a service that can receive service tickets from other users
            </summary>
        </member>
        <member name="F:Kerberos.NET.Server.PrincipalType.TrustedDomain">
            <summary>
            Indicates the principal is actually a partner realm and needs to be referred before the request can be completed
            </summary>
        </member>
        <member name="T:Kerberos.NET.Server.SocketWorkerBase">
            <summary>
            Receives a socket after Accept() to communicate with the client
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.TgsState.ApReq">
            <summary>
            The AP-REQ representing the ticket-granting-ticket in the PA-Data
            </summary>
        </member>
        <member name="P:Kerberos.NET.Server.TgsState.DecryptedApReq">
            <summary>
            The decrypted contents of the AP-REQ
            </summary>
        </member>
        <member name="T:Kerberos.NET.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Arg_RankMultiDimNotSupported">
            <summary>
              Looks up a localized string similar to Only single dimensional arrays are supported for the requested action..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Argument_EncodeDestinationTooSmall">
            <summary>
              Looks up a localized string similar to The destination is too small to hold the encoded value..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Argument_InvalidOffLen">
            <summary>
              Looks up a localized string similar to Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Argument_InvalidOidValue">
            <summary>
              Looks up a localized string similar to The OID value was invalid..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Argument_InvalidValue">
            <summary>
              Looks up a localized string similar to Value was invalid..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.ArgumentOutOfRange_Index">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the size of the collection..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.ArgumentOutOfRange_NeedNonNegNum">
            <summary>
              Looks up a localized string similar to Non-negative number required..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.ChasedReferralTooFar">
            <summary>
              Looks up a localized string similar to The client has been referred to too many realms before it could find the requested service principal.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_Asn_EnumeratedValueRequiresNonFlagsEnum">
            <summary>
              Looks up a localized string similar to ASN.1 Enumerated values only apply to enum types without the [Flags] attribute..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_Asn_NamedBitListRequiresFlagsEnum">
            <summary>
              Looks up a localized string similar to Named bit list operations require an enum with the [Flags] attribute..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_Asn_NamedBitListValueTooBig">
            <summary>
              Looks up a localized string similar to The encoded named bit list value is larger than the value size of the &apos;{0}&apos; enum..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_Asn_UniversalValueIsFixed">
            <summary>
              Looks up a localized string similar to Tags with TagClass Universal must have the appropriate TagValue value for the data type being read or written..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_Asn_UnusedBitCountRange">
            <summary>
              Looks up a localized string similar to Unused bit count must be between 0 and 7, inclusive..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_AsnWriter_EncodeUnbalancedStack">
            <summary>
              Looks up a localized string similar to Encode cannot be called while a Sequence or SetOf is still open..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_AsnWriter_PopWrongTag">
            <summary>
              Looks up a localized string similar to Cannot pop the requested tag as it is not currently in progress..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_Der_Invalid_Encoding">
            <summary>
              Looks up a localized string similar to ASN1 corrupted data..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_Der_Invalid_Encoding_Expected_Encoding">
            <summary>
              Looks up a localized string similar to ASN1 corrupted data. Expected {0}; Actual: {1}.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_Invalid_IA5String">
            <summary>
              Looks up a localized string similar to The string contains a character not in the 7 bit ASCII character set..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_Oid_InvalidName">
            <summary>
              Looks up a localized string similar to No OID value matches this name..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_Oid_InvalidValue">
            <summary>
              Looks up a localized string similar to The OID value is invalid..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_SSE_InvalidDataSize">
            <summary>
              Looks up a localized string similar to NoLength of the data to encrypt is invalid..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.Cryptography_WriteEncodedValue_OneValueAtATime">
            <summary>
              Looks up a localized string similar to The input to WriteEncodedValue must represent a single encoded value with no trailing data..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_AS_NONCE_MISMATCH">
            <summary>
              Looks up a localized string similar to AS-REQ nonce {0} does not match {1}.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_BAD_PVNO">
            <summary>
              Looks up a localized string similar to Requested protocol version number not supported.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_BADOPTION">
            <summary>
              Looks up a localized string similar to KDC cannot accommodate requested option.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_C_OLD_MAST_KVNO">
            <summary>
              Looks up a localized string similar to Client&apos;s key encrypted in old master key.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_C_PRINCIPAL_UNKNOWN">
            <summary>
              Looks up a localized string similar to Client not found in Kerberos database.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_CANNOT_POSTDATE">
            <summary>
              Looks up a localized string similar to Ticket not eligible for postdating.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_CANT_VERIFY_CERTIFICATE">
            <summary>
              Looks up a localized string similar to Reserved for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_CERTIFICATE_MISMATCH">
            <summary>
              Looks up a localized string similar to Reserved for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_CLIENT_NAME_MISMATCH">
            <summary>
              Looks up a localized string similar to Reserved for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_CLIENT_NOTYET">
            <summary>
              Looks up a localized string similar to Client not yet valid; try again later.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_CLIENT_REVOKED">
            <summary>
              Looks up a localized string similar to Clients credentials have been revoked.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED">
            <summary>
              Looks up a localized string similar to KDC policy has determined the provided Diffie-Hellman key parameters are not acceptable.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED">
            <summary>
              Looks up a localized string similar to The signature algorithm used to sign the CA certificate is not accepted.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED">
            <summary>
              Looks up a localized string similar to The signature algorithm used to sign the request is not accepted.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_ETYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for encryption type.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_INCONSISTENT_KEY_PURPOSE">
            <summary>
              Looks up a localized string similar to The client certificate does not contain the KeyPurposeId EKU and is required.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_INVALID_CERTIFICATE">
            <summary>
              Looks up a localized string similar to Reserved for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_KDC_NAME_MISMATCH">
            <summary>
              Looks up a localized string similar to Reserved for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_KEY_EXPIRED">
            <summary>
              Looks up a localized string similar to Password has expired; change password to reset.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_KEY_TOO_WEAK">
            <summary>
              Looks up a localized string similar to Reserved for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_MUST_USE_USER2USER">
            <summary>
              Looks up a localized string similar to Server principal valid for user2user only.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_NAME_EXP">
            <summary>
              Looks up a localized string similar to Client&apos;s entry in database has expired.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_NEVER_VALID">
            <summary>
              Looks up a localized string similar to Requested starttime is later than end time.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_NULL_KEY">
            <summary>
              Looks up a localized string similar to The client or server has a null key.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED">
            <summary>
              Looks up a localized string similar to The client did not include the required paChecksum parameter.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_PADATA_TYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for padata type.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_PATH_NOT_ACCEPTED">
            <summary>
              Looks up a localized string similar to KDC Policy rejects transited path.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_POLICY">
            <summary>
              Looks up a localized string similar to KDC policy rejects request.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_PREAUTH_FAILED">
            <summary>
              Looks up a localized string similar to Pre-authentication information was invalid.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_PREAUTH_REQUIRED">
            <summary>
              Looks up a localized string similar to Additional pre-authentication required.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_PRINCIPAL_NOT_UNIQUE">
            <summary>
              Looks up a localized string similar to Multiple principal entries in database.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED">
            <summary>
              Looks up a localized string similar to The KDC does not support public key encryption for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_REVOCATION_STATUS_UNAVAILABLE">
            <summary>
              Looks up a localized string similar to Reserved for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_REVOCATION_STATUS_UNKNOWN">
            <summary>
              Looks up a localized string similar to Reserved for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_REVOKED_CERTIFICATE">
            <summary>
              Looks up a localized string similar to Reserved for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_S_OLD_MAST_KVNO">
            <summary>
              Looks up a localized string similar to Server&apos;s key encrypted in old master key.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_S_PRINCIPAL_UNKNOWN">
            <summary>
              Looks up a localized string similar to Server not found in Kerberos database.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_SERVER_NOMATCH">
            <summary>
              Looks up a localized string similar to Requested server and ticket don&apos;t match.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_SERVICE_EXP">
            <summary>
              Looks up a localized string similar to Server&apos;s entry in database has expired.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_SERVICE_NOTYET">
            <summary>
              Looks up a localized string similar to Server not yet valid; try again later.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_SERVICE_REVOKED">
            <summary>
              Looks up a localized string similar to Credentials for server have been revoked.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_SUMTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for checksum type.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_SVC_UNAVAILABLE">
            <summary>
              Looks up a localized string similar to A service is not available.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_TGT_REVOKED">
            <summary>
              Looks up a localized string similar to TGT has been revoked.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_TRTYPE_NOSUPP">
            <summary>
              Looks up a localized string similar to KDC has no support for transited type.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERR_WRONG_REALM">
            <summary>
              Looks up a localized string similar to Reserved for future use.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERROR_CLIENT_NOT_TRUSTED">
            <summary>
              Looks up a localized string similar to Reserved for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERROR_INVALID_SIG">
            <summary>
              Looks up a localized string similar to Reserved for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KDC_ERROR_KDC_NOT_TRUSTED">
            <summary>
              Looks up a localized string similar to Reserved for PKINIT.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_BAD_INTEGRITY">
            <summary>
              Looks up a localized string similar to Integrity check on decrypted field failed.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_BADADDR">
            <summary>
              Looks up a localized string similar to Incorrect net address.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_BADDIRECTION">
            <summary>
              Looks up a localized string similar to Incorrect message direction.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_BADKEYVER">
            <summary>
              Looks up a localized string similar to Specified version of key is not available.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_BADMATCH">
            <summary>
              Looks up a localized string similar to Ticket and authenticator don&apos;t match.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_BADORDER">
            <summary>
              Looks up a localized string similar to Message out of order.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_BADSEQ">
            <summary>
              Looks up a localized string similar to Incorrect sequence number in message.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_BADVERSION">
            <summary>
              Looks up a localized string similar to Protocol version mismatch.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_INAPP_CKSUM">
            <summary>
              Looks up a localized string similar to Inappropriate type of checksum in message.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_METHOD">
            <summary>
              Looks up a localized string similar to Alternative authentication method required.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_MODIFIED">
            <summary>
              Looks up a localized string similar to Message stream modified.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_MSG_TYPE">
            <summary>
              Looks up a localized string similar to Invalid msg type.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_MUT_FAIL">
            <summary>
              Looks up a localized string similar to Mutual authentication failed.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_NO_TGT">
            <summary>
              Looks up a localized string similar to No TGT available to validate USER-TO-USER.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_NOKEY">
            <summary>
              Looks up a localized string similar to Service key not available.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_NOT_US">
            <summary>
              Looks up a localized string similar to The ticket isn&apos;t for us.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_REPEAT">
            <summary>
              Looks up a localized string similar to Request is a replay.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_SKEW">
            <summary>
              Looks up a localized string similar to Clock skew too great.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_TKT_EXPIRED">
            <summary>
              Looks up a localized string similar to Ticket expired.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_TKT_NYV">
            <summary>
              Looks up a localized string similar to Ticket not yet valid.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_ERR_USER_TO_USER_REQUIRED">
            <summary>
              Looks up a localized string similar to Ticket must be for USER-TO-USER.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_AP_PATH_NOT_ACCEPTED">
            <summary>
              Looks up a localized string similar to Policy rejects transited path.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_ERR_FIELD_TOOLONG">
            <summary>
              Looks up a localized string similar to Field is too long for this implementation.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_ERR_GENERIC">
            <summary>
              Looks up a localized string similar to Generic error.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.KRB_ERROR_KRB_ERR_RESPONSE_TOO_BIG">
            <summary>
              Looks up a localized string similar to Response too big for UDP; retry with TCP.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.ObjectDisposed_Generic">
            <summary>
              Looks up a localized string similar to Cannot access a disposed object..
            </summary>
        </member>
        <member name="P:Kerberos.NET.Strings.S4uTargetTicketBothPresent">
            <summary>
              Looks up a localized string similar to Both the S4UTarget and S4UTicket properties are present on the service ticket request which is not allowed. Set S4UTarget for invoking the S4USelf flow or otherwise set S4UTicket for the S4UProxy (constrained delegation) flow..
            </summary>
        </member>
        <member name="T:Kerberos.NET.UserNameFormat">
            <summary>
            Specifies the credentials format
            </summary>
        </member>
        <member name="F:Kerberos.NET.UserNameFormat.UserPrincipalName">
            <summary>
            User principal name (UPN) format is used to specify an Internet-style name in format such as user@REALM.COM
            </summary>
        </member>
        <member name="F:Kerberos.NET.UserNameFormat.DownLevelLogonName">
            <summary>
            The down-level logon name format is used to specify a domain and a user account in that domain, such as DOMAIN\UserName
            </summary>
        </member>
        <member name="T:Kerberos.NET.ValidationActions">
            <summary>
            Indicates how an AP-REQ should be validated by the receiving service.
            </summary>
        </member>
        <member name="F:Kerberos.NET.ValidationActions.None">
            <summary>
            DANGER: Indicates that the AP-REQ should not be validated at all.
            </summary>
        </member>
        <member name="F:Kerberos.NET.ValidationActions.ClientPrincipalIdentifier">
            <summary>
            Indicates that the CName in the Authenticator matches the CName in the Ticket.
            </summary>
        </member>
        <member name="F:Kerberos.NET.ValidationActions.Realm">
            <summary>
            Indicates that the Realm in the authenticator matches the Realm in the Ticket.
            </summary>
        </member>
        <member name="F:Kerberos.NET.ValidationActions.TokenWindow">
            <summary>
            Indicates the authentication instant must occur recently within a given skew (often 5 minutes or less).
            </summary>
        </member>
        <member name="F:Kerberos.NET.ValidationActions.StartTime">
            <summary>
            Indicates the ticket must be issued before the time of validation (now).
            </summary>
        </member>
        <member name="F:Kerberos.NET.ValidationActions.EndTime">
            <summary>
            Indicates the ticket must not already be expired at the time of validation (now).
            </summary>
        </member>
        <member name="F:Kerberos.NET.ValidationActions.Replay">
            <summary>
            Indicates the AP-REQ must not be replayed.
            </summary>
        </member>
        <member name="F:Kerberos.NET.ValidationActions.Pac">
            <summary>
            Indicates the PAC within the Ticket must have a valid signature signed using the service key.
            </summary>
        </member>
        <member name="F:Kerberos.NET.ValidationActions.RenewTill">
            <summary>
            Indicates the Ticket renewal period if set must be before the time of validation (now).
            </summary>
        </member>
        <member name="F:Kerberos.NET.ValidationActions.All">
            <summary>
            Indicates all validation actions must be invoked.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Win32.LsaInterop">
            <summary>
            Provides a layer to interact with the LSA functions used to create logon sessions and manipulate the ticket caches.
            </summary>
        </member>
        <member name="P:Kerberos.NET.Win32.LsaInterop.LogonId">
            <summary>
            The current LogonId represented by this LSA Handle.
            </summary>
        </member>
        <member name="M:Kerberos.NET.Win32.LsaInterop.RegisterLogonProcess(System.String,System.String)">
            <summary>
            Create a new instance of the interop and allow this instance to behave as SYSTEM.
            Note that this call requires the TrustedComputingBase privilege to execute.
            </summary>
            <param name="name">The optional logical name of the process as understood by LSA. Otherwise uses the default "KerberosNet".</param>
            <param name="package">The name of the LSA authentication package that will be interacted with.</param>
            <returns>Returns an instance of the <see cref="T:Kerberos.NET.Win32.LsaInterop"/> class.</returns>
        </member>
        <member name="M:Kerberos.NET.Win32.LsaInterop.Connect(System.String)">
            <summary>
            Create a new instance of the interop as a standard unprivileged caller.
            </summary>
            <param name="package">The name of the LSA authentication package that will be interacted with.</param>
            <returns>Returns an instance of the <see cref="T:Kerberos.NET.Win32.LsaInterop"/> class.</returns>
        </member>
        <member name="M:Kerberos.NET.Win32.LsaInterop.LogonUser(System.String,System.String,System.String)">
             <summary>
             Create a "NewCredentials" logon session for the current LSA Handle. This does not authenticate the user
             and only uses the credentials provided for outbound calls similar to the /netonly flag for runas.exe.
            
             Note: this will call <see cref="M:Kerberos.NET.Win32.NativeMethods.ImpersonateLoggedOnUser(Kerberos.NET.Win32.LsaTokenSafeHandle)" /> and set the current
             thread's primary token to the generated NT Token.
             </summary>
             <param name="username">The username to be used. Note leaving this null will use the default value "user".
             Passing an empty string will cause LSA to treat this as an anonymous user.</param>
             <param name="password">The password to be used by LSA for any future outbound ticket requests not already cached.</param>
             <param name="realm">The default realm to be used by LSA for the any outbound ticket requests not already cached.</param>
        </member>
        <member name="M:Kerberos.NET.Win32.LsaInterop.LogonUser(System.String,System.String,System.String,Kerberos.NET.Win32.LogonType)">
            <summary>
            Create a logon session for the current LSA Handle.
            </summary>
            <param name="username">The username to be used.
            Passing an empty string will cause LSA to treat this as an anonymous user.</param>
            <param name="password">The password to be used by LSA for any future outbound ticket requests not already cached.</param>
            <param name="realm">The default realm to be used by LSA for the any outbound ticket requests not already cached.</param>
            <param name="logonType">The type of logon session to create</param>
        </member>
        <member name="M:Kerberos.NET.Win32.LsaInterop.PurgeTicketCache(System.Int64)">
            <summary>
            Purge the ticket cache of the provided Logon Id. Note that the value 0 zero is treated as the current users Logon Id.
            </summary>
            <param name="luid">The Logon Id of the cache to be purged.</param>
        </member>
        <member name="M:Kerberos.NET.Win32.LsaInterop.GetTicketCache(System.Int64)">
            <summary>
            Get a list of tickets from within the current logon session or that of the passed in LUID.
            </summary>
            <param name="luid">The Logon Id of the cache to be purged.</param>
            <returns>Returns a list of cache entries</returns>
        </member>
        <member name="M:Kerberos.NET.Win32.LsaInterop.ImportCredential(Kerberos.NET.Entities.KrbCred,System.Int64)">
            <summary>
            Import a krb-cred structure containing one or more tickets into the current user ticket cache.
            </summary>
            <param name="krbCred">The krb-cred to import into the cache.</param>
            <param name="luid">The Logon Id of the user owning the ticket cache. The default of 0 represents the currently logged on user.</param>
        </member>
        <member name="M:Kerberos.NET.Win32.LsaInterop.GetTicket(System.String,System.Int64)">
            <summary>
            Get a Kerberos ticket for the provided SPN from teh current session or that of the passed in LUID.
            </summary>
            <param name="spn">The SPN to get a ticket against.</param>
            <param name="luid">The logon session</param>
            <returns>Returns a KrbCred containing the ticket and session key</returns>
        </member>
        <member name="F:Kerberos.NET.Win32.NativeMethods.KerberosCacheOptions.KERB_RETRIEVE_TICKET_DONT_USE_CACHE">
            <summary>
            Always request a new ticket; do not search the cache.
            If a ticket is obtained, the Kerberos authentication package returns STATUS_SUCCESS in the ProtocolStatus parameter of the LsaCallAuthenticationPackage function.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Win32.NativeMethods.KerberosCacheOptions.KERB_RETRIEVE_TICKET_USE_CACHE_ONLY">
            <summary>
            Return only a previously cached ticket.
            If such a ticket is not found, the Kerberos authentication package returns STATUS_OBJECT_NAME_NOT_FOUND in the ProtocolStatus parameter of the LsaCallAuthenticationPackage function.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Win32.NativeMethods.KerberosCacheOptions.KERB_RETRIEVE_TICKET_USE_CREDHANDLE">
            <summary>
            Use the CredentialsHandle member instead of LogonId to identify the logon session. The credential handle is used as the client credential for which the ticket is retrieved
            Note This option is not available for 32-bit Windows-based applications running on 64-bit Windows.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Win32.NativeMethods.KerberosCacheOptions.KERB_RETRIEVE_TICKET_AS_KERB_CRED">
            <summary>
            Return the ticket as a Kerberos credential. The Kerberos ticket is defined in Internet RFC 4120 as KRB_CRED. For more information, see http://www.ietf.org.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Win32.NativeMethods.KerberosCacheOptions.KERB_RETRIEVE_TICKET_WITH_SEC_CRED">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Win32.NativeMethods.KerberosCacheOptions.KERB_RETRIEVE_TICKET_CACHE_TICKET">
            <summary>
            Return the ticket that is currently in the cache. If the ticket is not in the cache, it is requested and then cached.
            This flag should not be used with the KERB_RETRIEVE_TICKET_DONT_USE_CACHE flag.
            Windows XP with SP1 and earlier and Windows Server 2003:  This option is not available.
            </summary>
        </member>
        <member name="F:Kerberos.NET.Win32.NativeMethods.KerberosCacheOptions.KERB_RETRIEVE_TICKET_MAX_LIFETIME">
            <summary>
            Return a fresh ticket with maximum allowed time by the policy. The ticker is cached afterwards.
            Use of this flag implies that KERB_RETRIEVE_TICKET_USE_CACHE_ONLY is not set and KERB_RETRIEVE_TICKET_CACHE_TICKET is set.
            Windows Vista, Windows Server 2008, Windows XP with SP1 and earlier and Windows Server 2003:  This option is not available.
            </summary>
        </member>
        <member name="T:Kerberos.NET.Win32.Win32StatusCode">
             <summary>
             Values are 32 bit values laid out as follows:
            
               3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
               1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
              +---+-+-+-----------------------+-------------------------------+
              |Sev|C|R|     Facility          |               Code            |
              +---+-+-+-----------------------+-------------------------------+
            
              where
            
                  Sev - is the severity code
            
                      00 - Success
                      01 - Informational
                      10 - Warning
                      11 - Error
            
                  C - is the Customer code flag
            
                  R - is a reserved bit
            
                  Facility - is the facility code
            
                  Code - is the facility's status code
             </summary>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.Asn1Tag">
            <summary>
              This type represents an ASN.1 tag, as described in ITU-T Recommendation X.680.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.EndOfContents">
            <summary>
              Represents the End-of-Contents meta-tag.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.Boolean">
            <summary>
              Represents the universal class tag for a Boolean value.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.Integer">
            <summary>
              Represents the universal class tag for an Integer value.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.PrimitiveBitString">
            <summary>
              Represents the universal class tag for a Bit String value under a primitive encoding.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.ConstructedBitString">
            <summary>
              Represents the universal class tag for a Bit String value under a constructed encoding.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.PrimitiveOctetString">
            <summary>
              Represents the universal class tag for an Octet String value under a primitive encoding.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.ConstructedOctetString">
            <summary>
              Represents the universal class tag for a Octet String value under a constructed encoding.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.Null">
            <summary>
              Represents the universal class tag for a Null value.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.ObjectIdentifier">
            <summary>
              Represents the universal class tag for an Object Identifier value.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.Enumerated">
            <summary>
              Represents the universal class tag for an Enumerated value.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.Sequence">
            <summary>
              Represents the universal class tag for a Sequence value (always a constructed encoding).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.SetOf">
            <summary>
              Represents the universal class tag for a SetOf value (always a constructed encoding).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.UtcTime">
            <summary>
              Represents the universal class tag for a UtcTime value.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.Asn1Tag.GeneralizedTime">
            <summary>
              Represents the universal class tag for a GeneralizedTime value.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass">
            <summary>
              The tag class to which this tag belongs.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed">
            <summary>
              Indicates if the tag represents a constructed encoding (<c>true</c>), or
              a primitive encoding (<c>false</c>).
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue">
            <summary>
              The numeric value for this tag.
            </summary>
            <remarks>
              If <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, this value can
              be interpreted as a <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/>.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.#ctor(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Boolean)">
            <summary>
              Create an <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> for a tag from the UNIVERSAL class.
            </summary>
            <param name="universalTagNumber">
              The <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> value to represent as a tag.
            </param>
            <param name="isConstructed">
              <c>true</c> for a constructed tag, <c>false</c> for a primitive tag.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="universalTagNumber"/> is not a known value.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.#ctor(System.Security.Cryptography.Asn1.TagClass,System.Int32,System.Boolean)">
            <summary>
              Create an <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> for a specified value within a specified tag class.
            </summary>
            <param name="tagClass">
              The <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> for this tag.
            </param>
            <param name="tagValue">
              The numeric value for this tag.
            </param>
            <param name="isConstructed">
              <c>true</c> for a constructed tag, <c>false</c> for a primitive tag.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="tagClass"/> is not a known value --OR--
              <paramref name="tagValue" /> is negative.
            </exception>
            <remarks>
              This constructor allows for the creation undefined UNIVERSAL class tags.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.AsConstructed">
            <summary>
              Produce an <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> with the same <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> and
              <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> values, but whose <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed"/> is <c>true</c>.
            </summary>
            <returns>
              An <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> with the same <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> and <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/>
              values, but whose <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed"/> is <c>true</c>.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.AsPrimitive">
            <summary>
              Produce an <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> with the same <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> and
              <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> values, but whose <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed"/> is <c>false</c>.
            </summary>
            <returns>
              An <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> with the same <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> and <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/>
              values, but whose <seealso cref="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed"/> is <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.TryDecode(System.ArraySegment{System.Byte},System.Security.Cryptography.Asn1.Asn1Tag@,System.Int32@)">
            <summary>
              Read a BER-encoded tag which starts at <paramref name="source"/>.
            </summary>
            <param name="source">
              The read only byte sequence from which to read.
            </param>
            <param name="tag">
              The decoded <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/>.
            </param>
            <param name="bytesConsumed">Returns the number of bytes that would be consumed from source</param>
            <returns>
              <c>true</c> if a tag was correctly decoded, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.TryDecode(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.Asn1.Asn1Tag@,System.Int32@)">
            <summary>
              Read a BER-encoded tag which starts at <paramref name="source"/>.
            </summary>
            <param name="source">
              The read only byte sequence whose beginning is a BER-encoded tag.
            </param>
            <param name="tag">
              The decoded <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/>.
            </param>
            <param name="bytesConsumed">Returns the number of bytes that would be consumed from source</param>
            <returns>
              <c>true</c> if a tag was correctly decoded, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize">
            <summary>
              Report the number of bytes required for the BER-encoding of this tag.
            </summary>
            <returns>
              The number of bytes required for the BER-encoding of this tag.
            </returns>
            <seealso cref="M:System.Security.Cryptography.Asn1.Asn1Tag.TryEncode(System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.TryEncode(System.Span{System.Byte},System.Int32@)">
            <summary>
              Write the BER-encoded form of this tag to <paramref name="destination"/>.
            </summary>
            <param name="destination">
              The start of where the encoded tag should be written.
            </param>
            <param name="bytesWritten">
              Receives the value from <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/> on success, 0 on failure.
            </param>
            <returns>
              <c>false</c> if <paramref name="destination"/>.<see cref="P:System.Span`1.Length"/> &lt;
              <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/>(), <c>true</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.TryEncode(System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
              Write the BER-encoded form of this tag to <paramref name="destination"/>.
            </summary>
            <param name="destination">
              The start of where the encoded tag should be written.
            </param>
            <param name="bytesWritten">
              Receives the value from <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/> on success, 0 on failure.
            </param>
            <returns>
              <c>false</c> if <paramref name="destination"/>.<see cref="P:System.ArraySegment`1.Count"/> &lt;
              <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/>(), <c>true</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.Encode(System.Span{System.Byte})">
            <summary>
              Write the BER-encoded form of this tag to <paramref name="destination"/>.
            </summary>
            <param name="destination">
              The start of where the encoded tag should be written.
            </param>
            <returns>
              The number of bytes written to <paramref name="destination"/>.
            </returns>
            <seealso cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="destination"/>.<see cref="P:System.Span`1.Length"/> &lt; <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/>.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.Encode(System.ArraySegment{System.Byte})">
            <summary>
              Write the BER-encoded form of this tag to <paramref name="destination"/>.
            </summary>
            <param name="destination">
              The start of where the encoded tag should be written.
            </param>
            <returns>
              The number of bytes written to <paramref name="destination"/>.
            </returns>
            <seealso cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="destination"/>.<see cref="P:System.ArraySegment`1.Count"/> &lt; <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.CalculateEncodedSize"/>.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.Equals(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Tests if <paramref name="other"/> has the same encoding as this tag.
            </summary>
            <param name="other">
              Tag to test for equality.
            </param>
            <returns>
              <c>true</c> if <paramref name="other"/> has the same values for
              <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/>, <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/>, and <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed"/>;
              <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.Equals(System.Object)">
            <summary>
              Tests if <paramref name="obj"/> is an <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> with the same
              encoding as this tag.
            </summary>
            <param name="obj">Object to test for value equality</param>
            <returns>
              <c>false</c> if <paramref name="obj"/> is not an <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/>,
              <see cref="M:System.Security.Cryptography.Asn1.Asn1Tag.Equals(System.Security.Cryptography.Asn1.Asn1Tag)"/> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>
              A 32-bit signed integer hash code.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.op_Equality(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Tests if two <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> values have the same BER encoding.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
              <c>true</c> if <paramref name="left"/> and <paramref name="right"/> have the same
              BER encoding, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.op_Inequality(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Tests if two <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> values have a different BER encoding.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
              <c>true</c> if <paramref name="left"/> and <paramref name="right"/> have a different
              BER encoding, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.HasSameClassAndValue(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Tests if <paramref name="other"/> has the same <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> and <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/>
              values as this tag, and does not compare <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.IsConstructed"/>.
            </summary>
            <param name="other">Tag to test for concept equality.</param>
            <returns>
              <c>true</c> if <paramref name="other"/> has the same <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> and <see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/>
              as this tag, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.Asn1Tag.ToString">
            <summary>
              Provides a text representation of this tag suitable for debugging.
            </summary>
            <returns>
              A text representation of this tag suitable for debugging.
            </returns>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.AsnEncodingRules">
            <summary>
              The encoding ruleset for an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> or <see cref="T:System.Security.Cryptography.Asn1.AsnWriter"/>.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.AsnEncodingRules.BER">
            <summary>
            ITU-T X.690 Basic Encoding Rules
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.AsnEncodingRules.CER">
            <summary>
            ITU-T X.690 Canonical Encoding Rules
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.AsnEncodingRules.DER">
            <summary>
            ITU-T X.690 Distinguished Encoding Rules
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.AsnReader">
            <summary>
              A stateful, forward-only reader for BER-, CER-, or DER-encoded ASN.1 data.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Int32@,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="value">
              On success, receives a <see cref="T:System.ReadOnlyMemory`1"/> over the original data
              corresponding to the value of the BIT STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the BIT STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Span{System.Byte},System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Reads the next value as a BIT STRING with a specified tag, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="value">
              On success, receives a <see cref="T:System.ReadOnlyMemory`1"/> over the original data
              corresponding to the value of the BIT STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the BIT STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Span{System.Byte},System.Int32@,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, copying the value
              into a provided destination buffer.
            </summary>
            <param name="destination">The buffer in which to write.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Int32@,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadBitString(System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with a specified tag, copying the value
              into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="destination">The buffer in which to write.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadBitString(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.ArraySegment{System.Byte},System.Int32@,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, copying the value
              into a provided destination buffer.
            </summary>
            <param name="destination">The buffer in which to write.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Int32@,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadBitString(System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ArraySegment{System.Byte},System.Int32@,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with a specified tag, copying the value
              into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="destination">The buffer in which to write.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadBitString(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadBitString(System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, returning the value
              in a byte array.
            </summary>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <returns>
              a copy of the value in a newly allocated, precisely sized, array.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Int32@,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Span{System.Byte},System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadBitString(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@)">
            <summary>
              Reads the next value as a BIT STRING with tag UNIVERSAL 3, returning the value
              in a byte array.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="unusedBitCount">
              On success, receives the number of bits in the last byte which were reported as
              "unused" by the writer.
            </param>
            <returns>
              a copy of the value in a newly allocated, precisely sized, array.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveBitStringValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyBitStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@,System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadBoolean">
            <summary>
              Reads the next value as a Boolean with tag UNIVERSAL 1.
            </summary>
            <returns>The next value as a Boolean.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadBoolean(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a Boolean with a specified tag.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>The next value as a Boolean.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.AsnReader.RuleSet">
            <summary>
              The <see cref="T:System.Security.Cryptography.Asn1.AsnEncodingRules"/> in use by this reader.
            </summary>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.AsnReader.HasData">
            <summary>
              An indication of whether or not the reader has remaining data available to process.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.#ctor(System.ReadOnlyMemory{System.Byte},System.Security.Cryptography.Asn1.AsnEncodingRules)">
             <summary>
               Construct an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> over <paramref name="data"/> with a given ruleset.
             </summary>
             <param name="data">The data to read.</param>
             <param name="ruleSet">The encoding constraints for the reader.</param>
             <remarks>
               This constructor does not evaluate <paramref name="data"/> for correctness,
               any correctness checks are done as part of member methods.
            
               This constructor does not copy <paramref name="data"/>. The caller is responsible for
               ensuring that the values do not change until the reader is finished.
             </remarks>
             <exception cref="T:System.ArgumentOutOfRangeException">
               <paramref name="ruleSet"/> is not defined.
             </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ThrowIfNotEmpty">
            <summary>
              Throws a standardized <see cref="T:System.Security.Cryptography.CryptographicException"/> if the reader has remaining
              data, performs no function if <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> returns <c>false</c>.
            </summary>
            <remarks>
              This method provides a standardized target and standardized exception for reading a
              "closed" structure, such as the nested content for an explicitly tagged value.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.PeekTag">
            <summary>
              Read the encoded tag at the next data position, without advancing the reader.
            </summary>
            <returns>
              The decoded <see cref="T:System.Security.Cryptography.Asn1.Asn1Tag"/> value.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              a tag could not be decoded at the reader's current position.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.PeekEncodedValue">
            <summary>
              Get a <see cref="T:System.ReadOnlyMemory`1"/> view of the next encoded value without
              advancing the reader. For indefinite length encodings this includes the
              End of Contents marker.
            </summary>
            <returns>A <see cref="T:System.ReadOnlyMemory`1"/> view of the next encoded value.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              The reader is positioned at a point where the tag or length is invalid
              under the current encoding rules.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.PeekContentBytes"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadEncodedValue"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.PeekContentBytes">
            <summary>
              Get a <see cref="T:System.ReadOnlyMemory`1"/> view of the content octets (bytes) of the
              next encoded value without advancing the reader.
            </summary>
            <returns>
              A <see cref="T:System.ReadOnlyMemory`1"/> view of the contents octets of the next encoded value.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              The reader is positioned at a point where the tag or length is invalid
              under the current encoding rules.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.PeekEncodedValue"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEncodedValue">
            <summary>
              Get a <see cref="T:System.ReadOnlyMemory`1"/> view of the next encoded value,
              and advance the reader past it. For an indefinite length encoding this includes
              the End of Contents marker.
            </summary>
            <returns>A <see cref="T:System.ReadOnlyMemory`1"/> view of the next encoded value.</returns>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.PeekEncodedValue"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.SeekEndOfContents(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Get the number of bytes between the start of <paramref name="source" /> and
            the End-of-Contents marker
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedBytes">
            <summary>
              Reads the next value as an Enumerated value with tag UNIVERSAL 10,
              returning the contents as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <returns>
              The bytes of the Enumerated value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue``1"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedBytes(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a Enumerated with a specified tag, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              The bytes of the Enumerated value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue``1">
            <summary>
              Reads the next value as an Enumerated value with tag UNIVERSAL 10, converting it to
              the non-[<see cref="T:System.FlagsAttribute"/>] enum specfied by <typeparamref name="TEnum"/>.
            </summary>
            <typeparam name="TEnum">Destination enum type</typeparam>
            <returns>
              the Enumerated value converted to a <typeparamref name="TEnum"/>.
            </returns>
            <remarks>
              This method does not validate that the return value is defined within
              <typeparamref name="TEnum"/>.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <typeparamref name="TEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TEnum"/> is not an enum type --OR--
              <typeparamref name="TEnum"/> was declared with <see cref="T:System.FlagsAttribute"/>
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue``1(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as an Enumerated with tag UNIVERSAL 10, converting it to the
              non-[<see cref="T:System.FlagsAttribute"/>] enum specfied by <typeparamref name="TEnum"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <typeparam name="TEnum">Destination enum type</typeparam>
            <returns>
              the Enumerated value converted to a <typeparamref name="TEnum"/>.
            </returns>
            <remarks>
              This method does not validate that the return value is defined within
              <typeparamref name="TEnum"/>.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <typeparamref name="TEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TEnum"/> is not an enum type --OR--
              <typeparamref name="TEnum"/> was declared with <see cref="T:System.FlagsAttribute"/>
              --OR--
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue(System.Type)">
            <summary>
              Reads the next value as an Enumerated value with tag UNIVERSAL 10, converting it to
              the non-[<see cref="T:System.FlagsAttribute"/>] enum specfied by <paramref name="tEnum"/>.
            </summary>
            <param name="tEnum">Type object representing the destination type.</param>
            <returns>
              the Enumerated value converted to a <paramref name="tEnum"/>.
            </returns>
            <remarks>
              This method does not validate that the return value is defined within
              <paramref name="tEnum"/>.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <paramref name="tEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tEnum"/> is not an enum type --OR--
              <paramref name="tEnum"/> was declared with <see cref="T:System.FlagsAttribute"/>
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Type)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Type)">
            <summary>
              Reads the next value as an Enumerated with tag UNIVERSAL 10, converting it to the
              non-[<see cref="T:System.FlagsAttribute"/>] enum specfied by <paramref name="tEnum"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="tEnum">Type object representing the destination type.</param>
            <returns>
              the Enumerated value converted to a <paramref name="tEnum"/>.
            </returns>
            <remarks>
              This method does not validate that the return value is defined within
              <paramref name="tEnum"/>.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <paramref name="tEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tEnum"/> is not an enum type --OR--
              <paramref name="tEnum"/> was declared with <see cref="T:System.FlagsAttribute"/>
              --OR--
              <paramref name="tEnum"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tEnum"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadGeneralizedTime(System.Boolean)">
            <summary>
              Reads the next value as a GeneralizedTime with tag UNIVERSAL 24.
            </summary>
            <param name="disallowFractions">
              <c>true</c> to cause a <see cref="T:System.Security.Cryptography.CryptographicException"/> to be thrown if a
              fractional second is encountered, such as the restriction on the PKCS#7 Signing
              Time attribute.
            </param>
            <returns>
              a DateTimeOffset representing the value encoded in the GeneralizedTime.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadGeneralizedTime(System.Security.Cryptography.Asn1.Asn1Tag,System.Boolean)">
            <summary>
              Reads the next value as a GeneralizedTime with a specified tag.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="disallowFractions">
              <c>true</c> to cause a <see cref="T:System.Security.Cryptography.CryptographicException"/> to be thrown if a
              fractional second is encountered, such as the restriction on the PKCS#7 Signing
              Time attribute.
            </param>
            <returns>
              a DateTimeOffset representing the value encoded in the GeneralizedTime.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadIntegerBytes">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <returns>
              The bytes of the Integer value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadIntegerBytes(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a Integer with a specified tag, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              The bytes of the Integer value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadInteger">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, returning the contents
              as a <see cref="T:System.Numerics.BigInteger"/>.
            </summary>
            <returns>
              The bytes of the Integer value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadInteger(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a Integer with a specified tag, returning the contents
              as a <see cref="T:System.Numerics.BigInteger"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              The bytes of the Integer value, in signed big-endian form.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt32(System.Int32@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.Int32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int32.MinValue"/> and <see cref="F:System.Int32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt32(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Int32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int32.MinValue"/> and <see cref="F:System.Int32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt32``1(System.Security.Cryptography.Asn1.Asn1Tag,``0@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.Int32"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Int32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int32.MinValue"/> and <see cref="F:System.Int32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt32(System.UInt32@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.UInt32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt32.MinValue"/> and <see cref="F:System.UInt32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt32(System.Security.Cryptography.Asn1.Asn1Tag,System.UInt32@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.UInt32"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt32.MinValue"/> and <see cref="F:System.UInt32.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt64(System.Int64@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.Int64"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int64.MinValue"/> and <see cref="F:System.Int64.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt64(System.Security.Cryptography.Asn1.Asn1Tag,System.Int64@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.Int64"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Int64"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int64.MinValue"/> and <see cref="F:System.Int64.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt64(System.UInt64@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.UInt64"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt64.MinValue"/> and <see cref="F:System.UInt64.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt64(System.Security.Cryptography.Asn1.Asn1Tag,System.UInt64@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as a <see cref="T:System.UInt64"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.UInt64"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt64.MinValue"/> and <see cref="F:System.UInt64.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt16(System.Int16@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.Int16"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int16.MinValue"/> and <see cref="F:System.Int16.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt16(System.Security.Cryptography.Asn1.Asn1Tag,System.Int16@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.Int16"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Int16"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Int16.MinValue"/> and <see cref="F:System.Int16.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt16(System.UInt16@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.UInt16"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt16.MinValue"/> and <see cref="F:System.UInt16.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt16(System.Security.Cryptography.Asn1.Asn1Tag,System.UInt16@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.UInt16"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.UInt16.MinValue"/> and <see cref="F:System.UInt16.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt8(System.SByte@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as an <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.SByte"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.SByte.MinValue"/> and <see cref="F:System.SByte.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadInt8(System.Security.Cryptography.Asn1.Asn1Tag,System.SByte@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as an <see cref="T:System.SByte"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.SByte"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.SByte.MinValue"/> and <see cref="F:System.SByte.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the Integer value is not valid
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt8(System.Byte@)">
            <summary>
              Reads the next value as an Integer with tag UNIVERSAL 2, interpreting the contents
              as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">
              On success, receives the <see cref="T:System.Byte"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Byte.MinValue"/> and <see cref="F:System.Byte.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadUInt8(System.Security.Cryptography.Asn1.Asn1Tag,System.Byte@)">
            <summary>
              Reads the next value as a Integer with a specified tag, interpreting the contents
              as a <see cref="T:System.Byte"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="value">
              On success, receives the <see cref="T:System.Byte"/> value represented
            </param>
            <returns>
              <c>false</c> and does not advance the reader if the value is not between
              <see cref="F:System.Byte.MinValue"/> and <see cref="F:System.Byte.MaxValue"/>, inclusive; otherwise
              <c>true</c> is returned and the reader advances.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue``1">
            <summary>
              Reads the next value as a NamedBitList with tag UNIVERSAL 3, converting it to the
              [<see cref="T:System.FlagsAttribute"/>] enum specfied by <typeparamref name="TFlagsEnum"/>.
            </summary>
            <typeparam name="TFlagsEnum">Destination enum type</typeparam>
            <returns>
              the NamedBitList value converted to a <typeparamref name="TFlagsEnum"/>.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <typeparamref name="TFlagsEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TFlagsEnum"/> is not an enum type --OR--
              <typeparamref name="TFlagsEnum"/> was not declared with <see cref="T:System.FlagsAttribute"/>
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue``1(System.Security.Cryptography.Asn1.Asn1Tag)">
             <summary>
               Reads the next value as a NamedBitList with tag UNIVERSAL 3, converting it to the
               [<see cref="T:System.FlagsAttribute"/>] enum specfied by <typeparamref name="TFlagsEnum"/>.
             </summary>
             <param name="expectedTag">The tag to check for before reading.</param>
             <typeparam name="TFlagsEnum">Destination enum type</typeparam>
             <returns>
               the NamedBitList value converted to a <typeparamref name="TFlagsEnum"/>.
             </returns>
             <exception cref="T:System.Security.Cryptography.CryptographicException">
               the next value does not have the correct tag --OR--
               the length encoding is not valid under the current encoding rules --OR--
               the contents are not valid under the current encoding rules --OR--
               the encoded value is too big to fit in a <typeparamref name="TFlagsEnum"/> value
             </exception>
             <exception cref="T:System.ArgumentException">
               <typeparamref name="TFlagsEnum"/> is not an enum type --OR--
               <typeparamref name="TFlagsEnum"/> was not declared with <see cref="T:System.FlagsAttribute"/>
               --OR--
               <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
               <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
               <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
               the method
             </exception>
             <remarks>
               The bit alignment performed by this method is to interpret the most significant bit
               in the first byte of the value as the least significant bit in <typeparamref name="TFlagsEnum"/>,
               with bits increasing in value until the least significant bit of the first byte, proceeding
               with the most significant bit of the second byte, and so on. Under this scheme, the following
               ASN.1 type declaration and C# enumeration can be used together:
            
               <code>
                 KeyUsage ::= BIT STRING {
                   digitalSignature   (0),
                   nonRepudiation     (1),
                   keyEncipherment    (2),
                   dataEncipherment   (3),
                   keyAgreement       (4),
                   keyCertSign        (5),
                   cRLSign            (6),
                   encipherOnly       (7),
                   decipherOnly       (8) }
               </code>
            
               <code>
                 [Flags]
                 enum KeyUsage
                 {
                     None              = 0,
                     DigitalSignature  = 1 &lt;&lt; (0),
                     NonRepudiation    = 1 &lt;&lt; (1),
                     KeyEncipherment   = 1 &lt;&lt; (2),
                     DataEncipherment  = 1 &lt;&lt; (3),
                     KeyAgreement      = 1 &lt;&lt; (4),
                     KeyCertSign       = 1 &lt;&lt; (5),
                     CrlSign           = 1 &lt;&lt; (6),
                     EncipherOnly      = 1 &lt;&lt; (7),
                     DecipherOnly      = 1 &lt;&lt; (8),
                 }
               </code>
            
               Note that while the example here uses the KeyUsage NamedBitList from
               <a href="https://tools.ietf.org/html/rfc3280#section-4.2.1.3">RFC 3280 (4.2.1.3)</a>,
               the example enum uses values thar are different from
               System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.
             </remarks>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue(System.Type)">
            <summary>
              Reads the next value as a NamedBitList with tag UNIVERSAL 3, converting it to the
              [<see cref="T:System.FlagsAttribute"/>] enum specfied by <paramref name="tFlagsEnum"/>.
            </summary>
            <param name="tFlagsEnum">Type object representing the destination type.</param>
            <returns>
              the NamedBitList value converted to a <paramref name="tFlagsEnum"/>.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the encoded value is too big to fit in a <paramref name="tFlagsEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tFlagsEnum"/> is not an enum type --OR--
              <paramref name="tFlagsEnum"/> was not declared with <see cref="T:System.FlagsAttribute"/>
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Type)">
            <summary>
              Reads the next value as a NamedBitList with tag UNIVERSAL 3, converting it to the
              [<see cref="T:System.FlagsAttribute"/>] enum specfied by <paramref name="tFlagsEnum"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="tFlagsEnum">Type object representing the destination type.</param>
            <returns>
              the NamedBitList value converted to a <paramref name="tFlagsEnum"/>.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR---
              the encoded value is too big to fit in a <paramref name="tFlagsEnum"/> value
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tFlagsEnum"/> is not an enum type --OR--
              <paramref name="tFlagsEnum"/> was not declared with <see cref="T:System.FlagsAttribute"/>
              --OR--
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadNamedBitListValue``1(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadNull">
            <summary>
              Reads the next value as a NULL with tag UNIVERSAL 5.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadNull(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a NULL with a specified tag.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Span{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, copying the value
              into a provided destination buffer.
            </summary>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as an OCTET STRING with a specified tag, copying the value
              into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, copying the value
              into a provided destination buffer.
            </summary>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as an OCTET STRING with a specified tag, copying the value
              into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, returning the value
              in a byte array.
            </summary>
            <returns>
              a copy of the contents in a newly allocated, precisely sized, array.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, returning the value
              in a byte array.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              a copy of the value in a newly allocated, precisely sized, array.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadOctetString"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Reads the next value as an OCTET STRING with tag UNIVERSAL 4, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="contents">
              On success, receives a <see cref="T:System.ReadOnlyMemory`1"/> over the original data
              corresponding to the contents of the OCTET STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the OCTET STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Reads the next value as an OCTET STRING with a specified tag, returning the contents
              as a <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="contents">
              On success, receives a <see cref="T:System.ReadOnlyMemory`1"/> over the original data
              corresponding to the value of the OCTET STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the OCTET STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyOctetStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadObjectIdentifierAsString">
            <summary>
              Reads the next value as an OBJECT IDENTIFIER with tag UNIVERSAL 6, returning
              the value in a dotted decimal format string.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadObjectIdentifierAsString(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as an OBJECT IDENTIFIER with a specified tag, returning
              the value in a dotted decimal format string.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadObjectIdentifier">
            <summary>
              Reads the next value as an OBJECT IDENTIFIER with tag UNIVERSAL 6, returning
              the value as an <see cref="T:System.Security.Cryptography.Oid"/>.
            </summary>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadObjectIdentifier(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as an OBJECT IDENTIFIER with a specified tag, returning
              the value as an <see cref="T:System.Security.Cryptography.Oid"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadSequence">
            <summary>
              Reads the next value as a SEQUENCE or SEQUENCE-OF with tag UNIVERSAL 16
              and returns the result as an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the sequence (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </summary>
            <returns>
              an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the sequence (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </returns>
            <remarks>
              the nested content is not evaluated by this method, and may contain data
              which is not valid under the current encoding rules.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <see cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadSequence(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadSequence(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Reads the next value as a SEQUENCE or SEQUENCE-OF with the specified tag
              and returns the result as an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the sequence (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <returns>
              an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the sequence (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </returns>
            <remarks>
              the nested content is not evaluated by this method, and may contain data
              which is not valid under the current encoding rules.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadSetOf(System.Boolean)">
            <summary>
              Reads the next value as a SET-OF with the specified tag
              and returns the result as an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the set-of (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </summary>
            <param name="skipSortOrderValidation">
              <c>true</c> to always accept the data in the order it is presented,
              <c>false</c> to verify that the data is sorted correctly when the
              encoding rules say sorting was required (CER and DER).
            </param>
            <returns>
              an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the set-of (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </returns>
            <remarks>
              the nested content is not evaluated by this method (aside from sort order, when
              required), and may contain data which is not valid under the current encoding rules.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadSetOf(System.Security.Cryptography.Asn1.Asn1Tag,System.Boolean)">
            <summary>
              Reads the next value as a SET-OF with the specified tag
              and returns the result as an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the set-of (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="skipSortOrderValidation">
              <c>true</c> to always accept the data in the order it is presented,
              <c>false</c> to verify that the data is sorted correctly when the
              encoding rules say sorting was required (CER and DER).
            </param>
            <returns>
              an <see cref="T:System.Security.Cryptography.Asn1.AsnReader"/> positioned at the first
              value in the set-of (or with <see cref="P:System.Security.Cryptography.Asn1.AsnReader.HasData"/> == <c>false</c>).
            </returns>
            <remarks>
              the nested content is not evaluated by this method (aside from sort order, when
              required), and may contain data which is not valid under the current encoding rules.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, returning the contents as an unprocessed <see cref="T:System.ReadOnlyMemory`1"/>
              over the original data.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="contents">
              On success, receives a <see cref="T:System.ReadOnlyMemory`1"/> over the original data
              corresponding to the contents of the character string.
            </param>
            <returns>
              <c>true</c> and advances the reader if the value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)">
            <summary>
              Reads the next value as a character with a specified tag, returning the contents
              as an unprocessed <see cref="T:System.ReadOnlyMemory`1"/> over the original data.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="contents">
              On success, receives a <see cref="T:System.ReadOnlyMemory`1"/> over the original data
              corresponding to the value of the OCTET STRING.
            </param>
            <returns>
              <c>true</c> and advances the reader if the OCTET STRING value had a primitive encoding,
              <c>false</c> and does not advance the reader if it had a constructed encoding.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, copying the value into a provided destination buffer.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, copying the value into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, copying the value into a provided destination buffer.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Byte},System.Int32@)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, copying the value into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <remarks>
              This method does not determine if the string used only characters defined by the encoding.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, copying the decoded value into a provided destination buffer.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="charsWritten">
              On success, receives the number of chars written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, copying the decoded value into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="charsWritten">
              On success, receives the number of chars written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Char},System.Int32@)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, copying the decoded value into a provided destination buffer.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="charsWritten">
              On success, receives the number of chars written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Char},System.Int32@)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, copying the decoded value into a provided destination buffer.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <param name="destination">The buffer in which to write.</param>
            <param name="charsWritten">
              On success, receives the number of chars written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> and advances the reader if <paramref name="destination"/> had sufficient
              length to receive the value, otherwise
              <c>false</c> and the reader does not advance.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ArraySegment{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber)">
            <summary>
              Reads the next value as character string with a UNIVERSAL tag appropriate to the specified
              encoding type, returning the decoded value as a <see cref="T:System.String"/>.
            </summary>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <returns>
              the decoded value as a <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber)">
            <summary>
              Reads the next value as character string with the specified tag and
              encoding type, returning the decoded value as a <see cref="T:System.String"/>.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="encodingType">
              A <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the value type to process.
            </param>
            <returns>
              the decoded value as a <see cref="T:System.String"/>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a known character string type.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules --OR--
              the string did not successfully decode
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not the same as
              <paramref name="encodingType"/>.
            </exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlyMemory{System.Byte}@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterStringBytes(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Byte},System.Int32@)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.TryCopyCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.Span{System.Char},System.Int32@)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadUtcTime(System.Int32)">
            <summary>
              Reads the next value as a UTCTime with tag UNIVERSAL 23.
            </summary>
            <param name="twoDigitYearMax">
              The largest year to represent with this value.
              The default value, 2049, represents the 1950-2049 range for X.509 certificates.
            </param>
            <returns>
              a DateTimeOffset representing the value encoded in the UTCTime.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <seealso cref="P:System.Globalization.Calendar.TwoDigitYearMax"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnReader.ReadUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnReader.ReadUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.Int32)">
            <summary>
              Reads the next value as a UTCTime with a specified tag.
            </summary>
            <param name="expectedTag">The tag to check for before reading.</param>
            <param name="twoDigitYearMax">
              The largest year to represent with this value.
              The default value, 2049, represents the 1950-2049 range for X.509 certificates.
            </param>
            <returns>
              a DateTimeOffset representing the value encoded in the UTCTime.
            </returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the next value does not have the correct tag --OR--
              the length encoding is not valid under the current encoding rules --OR--
              the contents are not valid under the current encoding rules
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="expectedTag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <seealso cref="P:System.Globalization.Calendar.TwoDigitYearMax"/>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.AsnWriter">
            <summary>
              A writer for BER-, CER-, and DER-encoded ASN.1 data.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteBitString(System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
              Write a Bit String value with a tag UNIVERSAL 3.
            </summary>
            <param name="bitString">The value to write.</param>
            <param name="unusedBitCount">
              The number of trailing bits which are not semantic.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="unusedBitCount"/> is not in the range [0,7]
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="bitString"/> has length 0 and <paramref name="unusedBitCount"/> is not 0 --OR--
              <paramref name="bitString"/> is not empty and any of the bits identified by
              <paramref name="unusedBitCount"/> is set
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteBitString(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
              Write a Bit String value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="bitString">The value to write.</param>
            <param name="unusedBitCount">
              The number of trailing bits which are not semantic.
            </param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="unusedBitCount"/> is not in the range [0,7]
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="bitString"/> has length 0 and <paramref name="unusedBitCount"/> is not 0 --OR--
              <paramref name="bitString"/> is not empty and any of the bits identified by
              <paramref name="unusedBitCount"/> is set
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteBoolean(System.Boolean)">
            <summary>
              Write a Boolean value with tag UNIVERSAL 1.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteBoolean(System.Security.Cryptography.Asn1.Asn1Tag,System.Boolean)">
            <summary>
              Write a Boolean value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
        </member>
        <member name="P:System.Security.Cryptography.Asn1.AsnWriter.RuleSet">
            <summary>
              The <see cref="T:System.Security.Cryptography.Asn1.AsnEncodingRules"/> in use by this writer.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.#ctor(System.Security.Cryptography.Asn1.AsnEncodingRules)">
            <summary>
              Create a new <see cref="T:System.Security.Cryptography.Asn1.AsnWriter"/> with a given set of encoding rules.
            </summary>
            <param name="ruleSet">The encoding constraints for the writer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="ruleSet"/> is not defined.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.Dispose">
            <summary>
              Release the resources held by this writer.
            </summary>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.Reset">
            <summary>
              Reset the writer to have no data, without releasing resources.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.GetEncodedLength">
            <summary>
              Gets the number of bytes that would be written by <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.TryEncode(System.Span{System.Byte},System.Int32@)"/>.
            </summary>
            <returns>
              The number of bytes that would be written by <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.TryEncode(System.Span{System.Byte},System.Int32@)"/>, or -1
              if a <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf"/> has not been completed.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.TryEncode(System.Span{System.Byte},System.Int32@)">
            <summary>
              Write the encoded representation of the data to <paramref name="destination"/>.
            </summary>
            <param name="destination">The buffer in which to write.</param>
            <param name="bytesWritten">
              On success, receives the number of bytes written to <paramref name="destination"/>.
            </param>
            <returns>
              <c>true</c> if the encode succeeded,
              <c>false</c> if <paramref name="destination"/> is too small.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              A <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf"/> has not been closed via
              <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.Encode">
            <summary>
              Return a new array containing the encoded value.
            </summary>
            <returns>A precisely-sized array containing the encoded value.</returns>
            <exception cref="T:System.InvalidOperationException">
              A <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf"/> has not been closed via
              <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.ValueEquals(System.ReadOnlySpan{System.Byte})">
            <summary>
              Determines if <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.Encode"/> would produce an output identical to
              <paramref name="other"/>.
            </summary>
            <returns>
              <see langword="true"/> if the pending encoded data is identical to <paramref name="other"/>,
              <see langword="false"/> otherwise.
            </returns>
            <exception cref="T:System.InvalidOperationException">
              A <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf"/> has not been closed via
              <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence"/> or <see cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEncodedValue(System.ReadOnlySpan{System.Byte})">
            <summary>
              Write a single value which has already been encoded.
            </summary>
            <param name="preEncodedValue">The value to write.</param>
            <remarks>
              This method only checks that the tag and length are encoded according to the current ruleset,
              and that the end of the value is the end of the input. The contents are not evaluated for
              semantic meaning.
            </remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="preEncodedValue"/> could not be read under the current encoding rules --OR--
              <paramref name="preEncodedValue"/> has data beyond the end of the first value
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue(System.Object)">
            <summary>
              Write a non-[<see cref="T:System.FlagsAttribute"/>] enum value as an Enumerated with
              tag UNIVERSAL 10.
            </summary>
            <param name="enumValue">The boxed enumeration value to write</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="enumValue"/> is not a boxed enum value --OR--
              the unboxed type of <paramref name="enumValue"/> is declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue``1(``0)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue``1(``0)">
            <summary>
              Write a non-[<see cref="T:System.FlagsAttribute"/>] enum value as an Enumerated with
              tag UNIVERSAL 10.
            </summary>
            <param name="enumValue">The boxed enumeration value to write</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TEnum"/> is not a boxed enum value --OR--
              <typeparamref name="TEnum"/> is declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue``1(``0)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)">
            <summary>
              Write a non-[<see cref="T:System.FlagsAttribute"/>] enum value as an Enumerated with
              tag UNIVERSAL 10.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="enumValue">The boxed enumeration value to write.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method --OR--
              <paramref name="enumValue"/> is not a boxed enum value --OR--
              the unboxed type of <paramref name="enumValue"/> is declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue``1(``0)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue``1(System.Security.Cryptography.Asn1.Asn1Tag,``0)">
            <summary>
              Write a non-[<see cref="T:System.FlagsAttribute"/>] enum value as an Enumerated with
              tag UNIVERSAL 10.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="enumValue">The boxed enumeration value to write.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method --OR--
              <typeparamref name="TEnum"/> is not an enum --OR--
              <typeparamref name="TEnum"/> is declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteEnumeratedValue``1(``0)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteGeneralizedTime(System.DateTimeOffset,System.Boolean)">
            <summary>
              Write the provided <see cref="T:System.DateTimeOffset"/> as a GeneralizedTime with tag
              UNIVERSAL 24, optionally excluding the fractional seconds.
            </summary>
            <param name="value">The value to write.</param>
            <param name="omitFractionalSeconds">
              <c>true</c> to treat the fractional seconds in <paramref name="value"/> as 0 even if
              a non-zero value is present.
            </param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteGeneralizedTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Boolean)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteGeneralizedTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Boolean)">
            <summary>
              Write the provided <see cref="T:System.DateTimeOffset"/> as a GeneralizedTime with a specified
              UNIVERSAL 24, optionally excluding the fractional seconds.
            </summary>
            <param name="tag">The tagto write.</param>
            <param name="value">The value to write.</param>
            <param name="omitFractionalSeconds">
              <c>true</c> to treat the fractional seconds in <paramref name="value"/> as 0 even if
              a non-zero value is present.
            </param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteGeneralizedTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Boolean)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.Int64)">
            <summary>
              Write an Integer value with tag UNIVERSAL 2.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.UInt64)">
            <summary>
              Write an Integer value with tag UNIVERSAL 2.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.Numerics.BigInteger)">
            <summary>
              Write an Integer value with tag UNIVERSAL 2.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.ReadOnlySpan{System.Byte})">
            <summary>
              Write an Integer value with a specified tag.
            </summary>
            <param name="value">The integer value to write, in signed big-endian byte order.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the 9 most sigificant bits are all set --OR--
              the 9 most sigificant bits are all unset
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.Security.Cryptography.Asn1.Asn1Tag,System.Int64)">
            <summary>
              Write an Integer value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.Security.Cryptography.Asn1.Asn1Tag,System.UInt64)">
            <summary>
              Write an Integer value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.Security.Cryptography.Asn1.Asn1Tag,System.Numerics.BigInteger)">
            <summary>
              Write an Integer value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteInteger(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte})">
            <summary>
              Write an Integer value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The integer value to write, in signed big-endian byte order.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the 9 most sigificant bits are all set --OR--
              the 9 most sigificant bits are all unset
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteIntegerUnsigned(System.ReadOnlySpan{System.Byte})">
            <summary>
              Write an Integer value with tag UNIVERSAL 2.
            </summary>
            <param name="value">The integer value to write, in unsigned big-endian byte order.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the 9 most sigificant bits are all unset
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteIntegerUnsigned(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte})">
            <summary>
              Write an Integer value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The integer value to write, in unsigned big-endian byte order.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              the 9 most sigificant bits are all unset
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList(System.Object)">
            <summary>
              Write a [<see cref="T:System.FlagsAttribute"/>] enum value as a NamedBitList with
              tag UNIVERSAL 3.
            </summary>
            <param name="enumValue">The boxed enumeration value to write</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="enumValue"/> is not a boxed enum value --OR--
              the unboxed type of <paramref name="enumValue"/> is not declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList``1(``0)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList``1(``0)">
            <summary>
              Write a [<see cref="T:System.FlagsAttribute"/>] enum value as a NamedBitList with
              tag UNIVERSAL 3.
            </summary>
            <param name="enumValue">The enumeration value to write</param>
            <exception cref="T:System.ArgumentException">
              <typeparamref name="TEnum"/> is not an enum value --OR--
              <typeparamref name="TEnum"/> is not declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList``1(System.Security.Cryptography.Asn1.Asn1Tag,``0)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList(System.Security.Cryptography.Asn1.Asn1Tag,System.Object)">
            <summary>
              Write a [<see cref="T:System.FlagsAttribute"/>] enum value as a NamedBitList with
              a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="enumValue">The boxed enumeration value to write</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method --OR--
              <paramref name="enumValue"/> is not a boxed enum value --OR--
              the unboxed type of <paramref name="enumValue"/> is not declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="enumValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNamedBitList``1(System.Security.Cryptography.Asn1.Asn1Tag,``0)">
            <summary>
              Write a [<see cref="T:System.FlagsAttribute"/>] enum value as a NamedBitList with
              a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="enumValue">The enumeration value to write</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method --OR--
              <typeparamref name="TEnum"/> is not an enum value --OR--
              <typeparamref name="TEnum"/> is not declared [<see cref="T:System.FlagsAttribute"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNull">
            <summary>
              Write NULL with tag UNIVERSAL 5.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteNull(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Write NULL with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteOctetString(System.ReadOnlySpan{System.Byte})">
            <summary>
              Write an Octet String with tag UNIVERSAL 4.
            </summary>
            <param name="octetString">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteOctetString(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteOctetString(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte})">
            <summary>
              Write an Octet String value with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="octetString">The value to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteObjectIdentifier(System.Security.Cryptography.Oid)">
            <summary>
              Write an Object Identifier with a specified tag.
            </summary>
            <param name="oid">The object identifier to write.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="oid"/> is <c>null</c>
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="oid"/>.<see cref="P:System.Security.Cryptography.Oid.Value"/> is not a valid dotted decimal
              object identifier
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteObjectIdentifier(System.String)">
            <summary>
              Write an Object Identifier with a specified tag.
            </summary>
            <param name="oidValue">The object identifier to write.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="oidValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="oidValue"/> is not a valid dotted decimal
              object identifier
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteObjectIdentifier(System.ReadOnlySpan{System.Char})">
            <summary>
              Write an Object Identifier with tag UNIVERSAL 6.
            </summary>
            <param name="oidValue">The object identifier to write.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="oidValue"/> is not a valid dotted decimal
              object identifier
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteObjectIdentifier(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Oid)">
            <summary>
              Write an Object Identifier with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="oid">The object identifier to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="oid"/> is <c>null</c>
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="oid"/>.<see cref="P:System.Security.Cryptography.Oid.Value"/> is not a valid dotted decimal
              object identifier
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteObjectIdentifier(System.Security.Cryptography.Asn1.Asn1Tag,System.String)">
            <summary>
              Write an Object Identifier with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="oidValue">The object identifier to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="oidValue"/> is <c>null</c>
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="oidValue"/> is not a valid dotted decimal
              object identifier
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteObjectIdentifier(System.Security.Cryptography.Asn1.Asn1Tag,System.ReadOnlySpan{System.Char})">
            <summary>
              Write an Object Identifier with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="oidValue">The object identifier to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="oidValue"/> is not a valid dotted decimal
              object identifier
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence">
            <summary>
              Begin writing a Sequence with tag UNIVERSAL 16.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence(System.Security.Cryptography.Asn1.Asn1Tag)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Begin writing a Sequence with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence">
            <summary>
              Indicate that the open Sequence with tag UNIVERSAL 16 is closed,
              returning the writer to the parent context.
            </summary>
            <exception cref="T:System.InvalidOperationException">
              the writer is not currently positioned within a Sequence with tag UNIVERSAL 16
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence(System.Security.Cryptography.Asn1.Asn1Tag)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Indicate that the open Sequence with the specified tag is closed,
              returning the writer to the parent context.
            </summary>
            <param name="tag">The tag to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.InvalidOperationException">
              the writer is not currently positioned within a Sequence with the specified tag
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSequence(System.Security.Cryptography.Asn1.Asn1Tag)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSequence"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf">
            <summary>
              Begin writing a Set-Of with a tag UNIVERSAL 17.
            </summary>
            <remarks>
              In <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.CER"/> and <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.DER"/> modes
              the writer will sort the Set-Of elements when the tag is closed.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf(System.Security.Cryptography.Asn1.Asn1Tag)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Begin writing a Set-Of with a specified tag.
            </summary>
            <param name="tag">The tag to write.</param>
            <remarks>
              In <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.CER"/> and <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.DER"/> modes
              the writer will sort the Set-Of elements when the tag is closed.
            </remarks>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf">
            <summary>
              Indicate that the open Set-Of with the tag UNIVERSAL 17 is closed,
              returning the writer to the parent context.
            </summary>
            <remarks>
              In <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.CER"/> and <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.DER"/> modes
              the writer will sort the Set-Of elements when the tag is closed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              the writer is not currently positioned within a Sequence with tag UNIVERSAL 17
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf(System.Security.Cryptography.Asn1.Asn1Tag)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.PopSetOf(System.Security.Cryptography.Asn1.Asn1Tag)">
            <summary>
              Indicate that the open Set-Of with the specified tag is closed,
              returning the writer to the parent context.
            </summary>
            <param name="tag">The tag to write.</param>
            <remarks>
              In <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.CER"/> and <see cref="F:System.Security.Cryptography.Asn1.AsnEncodingRules.DER"/> modes
              the writer will sort the Set-Of elements when the tag is closed.
            </remarks>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.InvalidOperationException">
              the writer is not currently positioned within a Set-Of with the specified tag
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.PushSetOf(System.Security.Cryptography.Asn1.Asn1Tag)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.String)">
            <summary>
              Write the provided string using the specified encoding type using the UNIVERSAL
              tag corresponding to the encoding type.
            </summary>
            <param name="encodingType">
              The <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the encoding to use.
            </param>
            <param name="str">The string to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a restricted character string encoding type --OR--
              <paramref name="encodingType"/> is a restricted character string encoding type that is not
              currently supported by this method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.String)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteCharacterString(System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Char})">
            <summary>
              Write the provided string using the specified encoding type using the UNIVERSAL
              tag corresponding to the encoding type.
            </summary>
            <param name="encodingType">
              The <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the encoding to use.
            </param>
            <param name="str">The string to write.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a restricted character string encoding type --OR--
              <paramref name="encodingType"/> is a restricted character string encoding type that is not
              currently supported by this method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.String)">
            <summary>
              Write the provided string using the specified encoding type using the specified
              tag corresponding to the encoding type.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="encodingType">
              The <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the encoding to use.
            </param>
            <param name="str">The string to write.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="str"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a restricted character string encoding type --OR--
              <paramref name="encodingType"/> is a restricted character string encoding type that is not
              currently supported by this method
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteCharacterString(System.Security.Cryptography.Asn1.Asn1Tag,System.Security.Cryptography.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Char})">
            <summary>
              Write the provided string using the specified encoding type using the specified
              tag corresponding to the encoding type.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="encodingType">
              The <see cref="T:System.Security.Cryptography.Asn1.UniversalTagNumber"/> corresponding to the encoding to use.
            </param>
            <param name="str">The string to write.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="encodingType"/> is not a restricted character string encoding type --OR--
              <paramref name="encodingType"/> is a restricted character string encoding type that is not
              currently supported by this method
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.DateTimeOffset)">
            <summary>
              Write the provided <see cref="T:System.DateTimeOffset"/> as a UTCTime with tag
              UNIVERSAL 23, and accepting the two-digit year as valid in context.
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset)"/>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.DateTimeOffset,System.Int32)"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset)">
            <summary>
              Write the provided <see cref="T:System.DateTimeOffset"/> as a UTCTime with a specified tag,
              accepting the two-digit year as valid in context.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The value to write.</param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Int32)"/>
            <seealso cref="P:System.Globalization.Calendar.TwoDigitYearMax"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.DateTimeOffset,System.Int32)">
            <summary>
              Write the provided <see cref="T:System.DateTimeOffset"/> as a UTCTime with tag
              UNIVERSAL 23, provided the year is in the allowed range.
            </summary>
            <param name="value">The value to write.</param>
            <param name="twoDigitYearMax">
              The maximum valid year for <paramref name="value"/>, after conversion to UTC.
              For the X.509 Time.utcTime range of 1950-2049, pass <c>2049</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/>.<see cref="P:System.DateTimeOffset.Year"/> (after conversion to UTC)
              is not in the range
              (<paramref name="twoDigitYearMax"/> - 100, <paramref name="twoDigitYearMax"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Int32)"/>
            <seealso cref="P:System.Globalization.Calendar.TwoDigitYearMax"/>
        </member>
        <member name="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Int32)">
            <summary>
              Write the provided <see cref="T:System.DateTimeOffset"/> as a UTCTime with a specified tag,
              provided the year is in the allowed range.
            </summary>
            <param name="tag">The tag to write.</param>
            <param name="value">The value to write.</param>
            <param name="twoDigitYearMax">
              The maximum valid year for <paramref name="value"/>, after conversion to UTC.
              For the X.509 Time.utcTime range of 1950-2049, pass <c>2049</c>.
            </param>
            <exception cref="T:System.ArgumentException">
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagClass"/> is
              <see cref="F:System.Security.Cryptography.Asn1.TagClass.Universal"/>, but
              <paramref name="tag"/>.<see cref="P:System.Security.Cryptography.Asn1.Asn1Tag.TagValue"/> is not correct for
              the method
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="value"/>.<see cref="P:System.DateTimeOffset.Year"/> (after conversion to UTC)
              is not in the range
              (<paramref name="twoDigitYearMax"/> - 100, <paramref name="twoDigitYearMax"/>]
            </exception>
            <exception cref="T:System.ObjectDisposedException">The writer has been Disposed.</exception>
            <seealso cref="M:System.Security.Cryptography.Asn1.AsnWriter.WriteUtcTime(System.Security.Cryptography.Asn1.Asn1Tag,System.DateTimeOffset,System.Int32)"/>
            <seealso cref="P:System.Globalization.Calendar.TwoDigitYearMax"/>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.BMPEncoding">
            <summary>
              Big-Endian UCS-2 encoding (the same as UTF-16BE, but disallowing surrogate pairs to leave plane 0)
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.T61Encoding">
            <summary>
            Compatibility encoding for T61Strings. Interprets the characters as UTF-8 or
            ISO-8859-1 as a fallback.
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.TagClass">
            <summary>
              The tag class for a particular ASN.1 tag.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.TagClass.Universal">
            <summary>
              The Universal tag class
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.TagClass.Application">
            <summary>
              The Application tag class
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.TagClass.ContextSpecific">
            <summary>
              The Context-Specific tag class
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.TagClass.Private">
            <summary>
              The Private tag class
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.Asn1.UniversalTagNumber">
            <summary>
              Tag assignments for the UNIVERSAL class in ITU-T X.680.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.EndOfContents">
            <summary>
              The reserved identifier for the End-of-Contents marker in an indefinite
              length encoding.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Boolean">
            <summary>
              The universal class tag value for Boolean.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Integer">
            <summary>
              The universal class tag value for Integer.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.BitString">
            <summary>
              The universal class tag value for Bit String.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.OctetString">
            <summary>
              The universal class tag value for Octet String.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Null">
            <summary>
              The universal class tag value for Null.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.ObjectIdentifier">
            <summary>
              The universal class tag value for Object Identifier.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.ObjectDescriptor">
            <summary>
              The universal class tag value for Object Descriptor.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.External">
            <summary>
              The universal class tag value for External.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.InstanceOf">
            <summary>
              The universal class tag value for Instance-Of.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Real">
            <summary>
              The universal class tag value for Real.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Enumerated">
            <summary>
              The universal class tag value for Enumerated.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Embedded">
            <summary>
              The universal class tag value for Embedded-PDV.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.UTF8String">
            <summary>
              The universal class tag value for UTF8String.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.RelativeObjectIdentifier">
            <summary>
              The universal class tag value for Relative Object Identifier.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Time">
            <summary>
              The universal class tag value for Time.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Sequence">
            <summary>
              The universal class tag value for Sequence.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.SequenceOf">
            <summary>
              The universal class tag value for Sequence-Of.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Set">
            <summary>
              The universal class tag value for Set.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.SetOf">
            <summary>
              The universal class tag value for Set-Of.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.NumericString">
            <summary>
              The universal class tag value for NumericString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.PrintableString">
            <summary>
              The universal class tag value for PrintableString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.TeletexString">
            <summary>
              The universal class tag value for TeletexString (T61String).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.T61String">
            <summary>
              The universal class tag value for T61String (TeletexString).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.VideotexString">
            <summary>
              The universal class tag value for VideotexString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.IA5String">
            <summary>
              The universal class tag value for IA5String.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.UtcTime">
            <summary>
              The universal class tag value for UTCTime.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.GeneralizedTime">
            <summary>
              The universal class tag value for GeneralizedTime.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.GraphicString">
            <summary>
              The universal class tag value for GraphicString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.VisibleString">
            <summary>
              The universal class tag value for VisibleString (ISO646String).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.ISO646String">
            <summary>
              The universal class tag value for ISO646String (VisibleString).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.GeneralString">
            <summary>
              The universal class tag value for GeneralString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.UniversalString">
            <summary>
              The universal class tag value for UniversalString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.UnrestrictedCharacterString">
            <summary>
              The universal class tag value for an unrestricted character string.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.BMPString">
            <summary>
              The universal class tag value for BMPString.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Date">
            <summary>
              The universal class tag value for Date.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.TimeOfDay">
            <summary>
              The universal class tag value for Time-Of-Day.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.DateTime">
            <summary>
              The universal class tag value for Date-Time.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.Duration">
            <summary>
              The universal class tag value for Duration.
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.ObjectIdentifierIRI">
            <summary>
              The universal class tag value for Object Identifier
              Internationalized Resource Identifier (IRI).
            </summary>
        </member>
        <member name="F:System.Security.Cryptography.Asn1.UniversalTagNumber.RelativeObjectIdentifierIRI">
            <summary>
              The universal class tag value for Relative Object Identifier
              Internationalized Resource Identifier (IRI).
            </summary>
        </member>
    </members>
</doc>
